import { Observable } from "rxjs";
export const nextFrame = (rive) => {
    return new Promise((res) => {
        rive.requestAnimationFrame(res);
    });
};
// Observable that trigger on every frame
export const animationFrame = (rive) => new Observable((subscriber) => {
    let start = 0;
    let first = true;
    const run = (time) => {
        const delta = time - start;
        start = time;
        if (first) {
            subscriber.next(16);
            first = false;
        }
        else {
            subscriber.next(delta);
        }
        // Because of bug in Chrome first value might be too big and cause issues
        if (subscriber.closed)
            return;
        rive.requestAnimationFrame(run);
    };
    rive.requestAnimationFrame(run);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nLXJpdmUvc3JjL2xpYi9mcmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVUsRUFBbUIsRUFBRTtJQUN2RCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDekIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQseUNBQXlDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxVQUFVLENBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUNsRixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUMzQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQzNCLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDYixJQUFJLEtBQUssRUFBRTtZQUNULFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNmO2FBQU07WUFDTCxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QseUVBQXlFO1FBQ3pFLElBQUksVUFBVSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNqQyxDQUFDLENBQUE7SUFDRCxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSaXZlQ2FudmFzIGFzIFJpdmUgfSBmcm9tIFwiQHJpdmUtYXBwL2NhbnZhcy1hZHZhbmNlZFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBuZXh0RnJhbWUgPSAocml2ZTogUml2ZSk6IFByb21pc2U8bnVtYmVyPiA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcclxuICAgIHJpdmUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcyk7XHJcbiAgfSlcclxufVxyXG5cclxuLy8gT2JzZXJ2YWJsZSB0aGF0IHRyaWdnZXIgb24gZXZlcnkgZnJhbWVcclxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkZyYW1lID0gKHJpdmU6IFJpdmUpID0+IG5ldyBPYnNlcnZhYmxlPG51bWJlcj4oKHN1YnNjcmliZXIpID0+IHtcclxuICBsZXQgc3RhcnQgPSAwO1xyXG4gIGxldCBmaXJzdCA9IHRydWU7XHJcbiAgY29uc3QgcnVuID0gKHRpbWU6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3QgZGVsdGEgPSB0aW1lIC0gc3RhcnQ7XHJcbiAgICBzdGFydCA9IHRpbWU7XHJcbiAgICBpZiAoZmlyc3QpIHtcclxuICAgICAgc3Vic2NyaWJlci5uZXh0KDE2KTsgIFxyXG4gICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3Vic2NyaWJlci5uZXh0KGRlbHRhKTsgXHJcbiAgICB9XHJcbiAgICAvLyBCZWNhdXNlIG9mIGJ1ZyBpbiBDaHJvbWUgZmlyc3QgdmFsdWUgbWlnaHQgYmUgdG9vIGJpZyBhbmQgY2F1c2UgaXNzdWVzXHJcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHJldHVybjtcclxuICAgIHJpdmUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJ1bilcclxuICB9XHJcbiAgcml2ZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocnVuKTtcclxufSk7Il19