import RiveBuilder from '@rive-app/canvas-advanced';
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { animationFrame } from './frame';
import { share } from 'rxjs/operators';
import { RIVE_FOLDER, RIVE_VERSION, RIVE_WASM } from './tokens';
import { firstValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class RiveService {
    constructor(http, folder, wasmPath, version) {
        this.http = http;
        const riveVersion = version ?? '2.4.0';
        this.folder = folder ?? 'assets/rive';
        this.wasmPath = wasmPath ?? `https://unpkg.com/@rive-app/canvas-advanced@${riveVersion}/rive.wasm`;
    }
    async getRive() {
        if (!this.rive) {
            const locateFile = () => this.wasmPath;
            this.rive = await RiveBuilder({ locateFile });
            this.frame = animationFrame(this.rive).pipe(share());
        }
        return this.rive;
    }
    getAsset(asset) {
        return firstValueFrom(this.http.get(asset, { responseType: 'arraybuffer' }));
    }
    /** Load a riv file */
    async load(file) {
        // Provide the file directly
        if (typeof file !== 'string') {
            const [rive, buffer] = await Promise.all([
                this.getRive(),
                file.arrayBuffer(),
            ]);
            return rive?.load(new Uint8Array(buffer));
        }
        const asset = `${this.folder}/${file}.riv`;
        const [rive, buffer] = await Promise.all([
            this.getRive(),
            this.getAsset(asset),
        ]);
        if (!rive)
            throw new Error('Could not load rive');
        return rive.load(new Uint8Array(buffer));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveService, deps: [{ token: i1.HttpClient }, { token: RIVE_FOLDER, optional: true }, { token: RIVE_WASM, optional: true }, { token: RIVE_VERSION, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RIVE_FOLDER]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RIVE_WASM]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RIVE_VERSION]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmctcml2ZS9zcmMvbGliL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxXQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFFcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDaEUsT0FBTyxFQUFFLGNBQWMsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7O0FBR2xELE1BQU0sT0FBTyxXQUFXO0lBTXRCLFlBQ1UsSUFBZ0IsRUFDUyxNQUFlLEVBQ2pCLFFBQWlCLEVBQ2QsT0FBZ0I7UUFIMUMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUt4QixNQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLGFBQWEsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSwrQ0FBK0MsV0FBVyxZQUFZLENBQUM7SUFDckcsQ0FBQztJQUVPLEtBQUssQ0FBQyxPQUFPO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdEQ7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxLQUFhO1FBQzVCLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELHNCQUFzQjtJQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQTBCO1FBQ25DLDRCQUE0QjtRQUM1QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDekMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsV0FBVyxFQUFFO2FBQ25CLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDO1FBQzNDLE1BQU0sQ0FBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNyQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDOzhHQWhEVSxXQUFXLDRDQVFBLFdBQVcsNkJBQ1gsU0FBUyw2QkFDVCxZQUFZO2tIQVZ2QixXQUFXLGNBREUsTUFBTTs7MkZBQ25CLFdBQVc7a0JBRHZCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzswQkFTN0IsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxXQUFXOzswQkFDOUIsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxTQUFTOzswQkFDNUIsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJpdmVCdWlsZGVyIGZyb20gJ0ByaXZlLWFwcC9jYW52YXMtYWR2YW5jZWQnO1xyXG5pbXBvcnQgeyBSaXZlQ2FudmFzIGFzIFJpdmUgfSBmcm9tICdAcml2ZS1hcHAvY2FudmFzLWFkdmFuY2VkJztcclxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSB9IGZyb20gJy4vZnJhbWUnO1xyXG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUklWRV9GT0xERVIsIFJJVkVfVkVSU0lPTiwgUklWRV9XQVNNIH0gZnJvbSAnLi90b2tlbnMnO1xyXG5pbXBvcnQgeyBmaXJzdFZhbHVlRnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFJpdmVTZXJ2aWNlIHtcclxuICBwcml2YXRlIHdhc21QYXRoOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBmb2xkZXI6IHN0cmluZztcclxuICBwdWJsaWMgcml2ZT86IFJpdmU7XHJcbiAgcHVibGljIGZyYW1lPzogT2JzZXJ2YWJsZTxudW1iZXI+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUklWRV9GT0xERVIpIGZvbGRlcj86IHN0cmluZyxcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUklWRV9XQVNNKSB3YXNtUGF0aD86IHN0cmluZyxcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUklWRV9WRVJTSU9OKSB2ZXJzaW9uPzogc3RyaW5nLFxyXG4gICkge1xyXG4gICAgY29uc3Qgcml2ZVZlcnNpb24gPSB2ZXJzaW9uID8/ICcyLjQuMCc7XHJcbiAgICB0aGlzLmZvbGRlciA9IGZvbGRlciA/PyAnYXNzZXRzL3JpdmUnO1xyXG4gICAgdGhpcy53YXNtUGF0aCA9IHdhc21QYXRoID8/IGBodHRwczovL3VucGtnLmNvbS9Acml2ZS1hcHAvY2FudmFzLWFkdmFuY2VkQCR7cml2ZVZlcnNpb259L3JpdmUud2FzbWA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdldFJpdmUoKSB7XHJcbiAgICBpZiAoIXRoaXMucml2ZSkge1xyXG4gICAgICBjb25zdCBsb2NhdGVGaWxlID0gKCkgPT4gdGhpcy53YXNtUGF0aDtcclxuICAgICAgdGhpcy5yaXZlID0gYXdhaXQgUml2ZUJ1aWxkZXIoeyBsb2NhdGVGaWxlIH0pO1xyXG4gICAgICB0aGlzLmZyYW1lID0gYW5pbWF0aW9uRnJhbWUodGhpcy5yaXZlKS5waXBlKHNoYXJlKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMucml2ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0QXNzZXQoYXNzZXQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGZpcnN0VmFsdWVGcm9tKHRoaXMuaHR0cC5nZXQoYXNzZXQsIHsgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInIH0pKTtcclxuICB9XHJcblxyXG4gIC8qKiBMb2FkIGEgcml2IGZpbGUgKi9cclxuICBhc3luYyBsb2FkKGZpbGU6IHN0cmluZyB8IEZpbGUgfCBCbG9iKSB7XHJcbiAgICAvLyBQcm92aWRlIHRoZSBmaWxlIGRpcmVjdGx5XHJcbiAgICBpZiAodHlwZW9mIGZpbGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnN0IFsgcml2ZSwgYnVmZmVyIF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgdGhpcy5nZXRSaXZlKCksXHJcbiAgICAgICAgZmlsZS5hcnJheUJ1ZmZlcigpLFxyXG4gICAgICBdKTtcclxuICAgICAgcmV0dXJuIHJpdmU/LmxvYWQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXNzZXQgPSBgJHt0aGlzLmZvbGRlcn0vJHtmaWxlfS5yaXZgO1xyXG4gICAgY29uc3QgWyByaXZlLCBidWZmZXIgXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgdGhpcy5nZXRSaXZlKCksXHJcbiAgICAgIHRoaXMuZ2V0QXNzZXQoYXNzZXQpLFxyXG4gICAgXSk7XHJcbiAgICBpZiAoIXJpdmUpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGxvYWQgcml2ZScpO1xyXG4gICAgcmV0dXJuIHJpdmUubG9hZChuZXcgVWludDhBcnJheShidWZmZXIpKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==