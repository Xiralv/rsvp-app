import { Directive, Input, NgZone } from '@angular/core';
import { RiveCanvas } from '../canvas';
import * as i0 from "@angular/core";
import * as i1 from "../canvas";
export class RiveTransformComponent {
    set name(name) {
        if (typeof name !== 'string')
            return;
        this.canvas.onReady().subscribe(() => {
            this.component = this.getComponent(name);
            if (!this.component)
                throw new Error(`Could not find component with name: "${name}"`);
            for (const key in this.state) {
                this.component[key] = this.state[key];
            }
        });
    }
    set scale(value) {
        this.set('scaleX', value);
        this.set('scaleY', value);
    }
    set scaleX(value) {
        this.set('scaleX', value);
    }
    set scaleY(value) {
        this.set('scaleX', value);
    }
    set rotation(value) {
        const v = typeof value === 'string' ? parseFloat(value) : value;
        if (v) {
            const rotation = Math.abs(v) > (2 * Math.PI) ? (v * (Math.PI / 180)) : v;
            this.set('rotation', rotation);
        }
    }
    constructor(zone, canvas) {
        this.zone = zone;
        this.canvas = canvas;
        this.state = {};
    }
    set(key, value) {
        this.zone.runOutsideAngular(() => {
            const v = typeof value === 'string' ? parseFloat(value) : value;
            if (typeof v === 'number') {
                if (this.component)
                    this.component[key] = v;
                else
                    this.state[key] = v;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveTransformComponent, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveTransformComponent, inputs: { name: "name", scale: "scale", scaleX: "scaleX", scaleY: "scaleY", rotation: "rotation" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveTransformComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }]; }, propDecorators: { name: [{
                type: Input
            }], scale: [{
                type: Input
            }], scaleX: [{
                type: Input
            }], scaleY: [{
                type: Input
            }], rotation: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctcml2ZS9zcmMvbGliL2NvbXBvbmVudC90cmFuc2Zvcm0tY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFJdkMsTUFBTSxPQUFnQixzQkFBc0I7SUFJMUMsSUFBYSxJQUFJLENBQUMsSUFBWTtRQUM1QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVE7WUFBRSxPQUFPO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLElBQUksR0FBRyxDQUFDLENBQUM7WUFDdEYsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBYyxDQUFRLENBQUM7YUFDcEU7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFhLEtBQUssQ0FBQyxLQUFnQztRQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBYSxNQUFNLENBQUMsS0FBeUM7UUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQWEsTUFBTSxDQUFDLEtBQXlDO1FBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFhLFFBQVEsQ0FBQyxLQUF5QztRQUM3RCxNQUFNLENBQUMsR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxFQUFFO1lBQ0wsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRUQsWUFDVSxJQUFZLEVBQ1YsTUFBa0I7UUFEcEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNWLFdBQU0sR0FBTixNQUFNLENBQVk7UUFwQ3BCLFVBQUssR0FBZSxFQUFFLENBQUM7SUFxQzlCLENBQUM7SUFJTSxHQUFHLENBQUMsR0FBWSxFQUFFLEtBQXlDO1FBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDaEUsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3pCLElBQUksSUFBSSxDQUFDLFNBQVM7b0JBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFRLENBQUM7O29CQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQVEsQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0FuRG1CLHNCQUFzQjtrR0FBdEIsc0JBQXNCOzsyRkFBdEIsc0JBQXNCO2tCQUQzQyxTQUFTO3NIQUtLLElBQUk7c0JBQWhCLEtBQUs7Z0JBV08sS0FBSztzQkFBakIsS0FBSztnQkFLTyxNQUFNO3NCQUFsQixLQUFLO2dCQUlPLE1BQU07c0JBQWxCLEtBQUs7Z0JBSU8sUUFBUTtzQkFBcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSaXZlQ2FudmFzIH0gZnJvbSAnLi4vY2FudmFzJztcclxuaW1wb3J0IHsgVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnQHJpdmUtYXBwL2NhbnZhcy1hZHZhbmNlZCc7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJpdmVUcmFuc2Zvcm1Db21wb25lbnQ8VCBleHRlbmRzIFRyYW5zZm9ybUNvbXBvbmVudD4ge1xyXG4gIHByb3RlY3RlZCBjb21wb25lbnQ/OiBUO1xyXG4gIHByb3RlY3RlZCBzdGF0ZTogUGFydGlhbDxUPiA9IHt9O1xyXG5cclxuICBASW5wdXQoKSBzZXQgbmFtZShuYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHJldHVybjtcclxuICAgIHRoaXMuY2FudmFzLm9uUmVhZHkoKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmNvbXBvbmVudCA9IHRoaXMuZ2V0Q29tcG9uZW50KG5hbWUpO1xyXG4gICAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGNvbXBvbmVudCB3aXRoIG5hbWU6IFwiJHtuYW1lfVwiYCk7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc3RhdGUpIHtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudFtrZXkgYXMga2V5b2YgVF0gPSB0aGlzLnN0YXRlW2tleSBhcyBrZXlvZiBUXSBhcyBhbnk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgc2V0IHNjYWxlKHZhbHVlOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnNldCgnc2NhbGVYJywgdmFsdWUpO1xyXG4gICAgdGhpcy5zZXQoJ3NjYWxlWScsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpIHNldCBzY2FsZVgodmFsdWU6IG51bWJlciB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcclxuICAgIHRoaXMuc2V0KCdzY2FsZVgnLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBzZXQgc2NhbGVZKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnNldCgnc2NhbGVYJywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgc2V0IHJvdGF0aW9uKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XHJcbiAgICBjb25zdCB2ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHBhcnNlRmxvYXQodmFsdWUpIDogdmFsdWU7XHJcbiAgICBpZiAodikge1xyXG4gICAgICBjb25zdCByb3RhdGlvbiA9IE1hdGguYWJzKHYpID4gKDIgKiBNYXRoLlBJKSA/ICh2ICogKE1hdGguUEkvMTgwKSkgOiB2O1xyXG4gICAgICB0aGlzLnNldCgncm90YXRpb24nLCByb3RhdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxyXG4gICAgcHJvdGVjdGVkIGNhbnZhczogUml2ZUNhbnZhc1xyXG4gICkge31cclxuXHJcbiAgYWJzdHJhY3QgZ2V0Q29tcG9uZW50KG5hbWU6IHN0cmluZyk6IFQgfCB1bmRlZmluZWQ7XHJcblxyXG4gIHByb3RlY3RlZCBzZXQoa2V5OiBrZXlvZiBULCB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgY29uc3QgdiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IHZhbHVlO1xyXG4gICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB0aGlzLmNvbXBvbmVudFtrZXldID0gdiBhcyBhbnk7XHJcbiAgICAgICAgZWxzZSB0aGlzLnN0YXRlW2tleV0gPSB2IGFzIGFueTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59Il19