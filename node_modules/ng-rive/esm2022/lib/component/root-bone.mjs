import { Directive, Input, NgZone } from '@angular/core';
import { RiveCanvas } from '../canvas';
import { RiveTransformComponent } from './transform-component';
import * as i0 from "@angular/core";
import * as i1 from "../canvas";
export class RiveRootBone extends RiveTransformComponent {
    set x(value) {
        this.set('x', value);
    }
    set y(value) {
        this.set('y', value);
    }
    set length(value) {
        this.set('length', value);
    }
    constructor(zone, canvas) {
        super(zone, canvas);
    }
    getComponent(name) {
        return this.canvas.artboard?.rootBone(name);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveRootBone, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveRootBone, isStandalone: true, selector: "riv-root-bone, [rivRootBone]", inputs: { x: "x", y: "y", length: "length" }, exportAs: ["rivRootBone"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveRootBone, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-root-bone, [rivRootBone]',
                    exportAs: 'rivRootBone',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }]; }, propDecorators: { x: [{
                type: Input
            }], y: [{
                type: Input
            }], length: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC1ib25lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1yaXZlL3NyYy9saWIvY29tcG9uZW50L3Jvb3QtYm9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBUy9ELE1BQU0sT0FBTyxZQUFhLFNBQVEsc0JBQWdDO0lBQ2hFLElBQWEsQ0FBQyxDQUFDLEtBQXlDO1FBQ3RELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFhLENBQUMsQ0FBQyxLQUF5QztRQUN0RCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBYSxNQUFNLENBQUMsS0FBeUM7UUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFlBQVksSUFBWSxFQUFFLE1BQWtCO1FBQzFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFZO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7OEdBbkJVLFlBQVk7a0dBQVosWUFBWTs7MkZBQVosWUFBWTtrQkFMeEIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QyxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsVUFBVSxFQUFFLElBQUk7aUJBQ25CO3NIQUVjLENBQUM7c0JBQWIsS0FBSztnQkFJTyxDQUFDO3NCQUFiLEtBQUs7Z0JBSU8sTUFBTTtzQkFBbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSaXZlQ2FudmFzIH0gZnJvbSAnLi4vY2FudmFzJztcclxuaW1wb3J0IHsgUml2ZVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4vdHJhbnNmb3JtLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFJvb3RCb25lIH0gZnJvbSAnQHJpdmUtYXBwL2NhbnZhcy1hZHZhbmNlZCc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ3Jpdi1yb290LWJvbmUsIFtyaXZSb290Qm9uZV0nLFxyXG4gICAgZXhwb3J0QXM6ICdyaXZSb290Qm9uZScsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSaXZlUm9vdEJvbmUgZXh0ZW5kcyBSaXZlVHJhbnNmb3JtQ29tcG9uZW50PFJvb3RCb25lPiB7XHJcbiAgQElucHV0KCkgc2V0IHgodmFsdWU6IG51bWJlciB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcclxuICAgIHRoaXMuc2V0KCd4JywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgc2V0IHkodmFsdWU6IG51bWJlciB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcclxuICAgIHRoaXMuc2V0KCd5JywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgc2V0IGxlbmd0aCh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5zZXQoJ2xlbmd0aCcsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgY2FudmFzOiBSaXZlQ2FudmFzKSB7XHJcbiAgICBzdXBlcih6b25lLCBjYW52YXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29tcG9uZW50KG5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLmFydGJvYXJkPy5yb290Qm9uZShuYW1lKTtcclxuICB9XHJcblxyXG59Il19