import { Directive, Input, NgZone } from '@angular/core';
import { RiveCanvas } from '../canvas';
import { RiveTransformComponent } from './transform-component';
import * as i0 from "@angular/core";
import * as i1 from "../canvas";
export class RiveNode extends RiveTransformComponent {
    set x(value) {
        this.set('x', value);
    }
    get x() {
        return this.component?.x;
    }
    set y(value) {
        this.set('y', value);
    }
    get y() {
        return this.component?.y;
    }
    constructor(zone, canvas) {
        super(zone, canvas);
    }
    getComponent(name) {
        return this.canvas.artboard?.node(name);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveNode, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveNode, isStandalone: true, selector: "riv-node, [rivNode]", inputs: { x: "x", y: "y" }, exportAs: ["rivNode"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveNode, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-node, [rivNode]',
                    exportAs: 'rivNode',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }]; }, propDecorators: { x: [{
                type: Input
            }], y: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctcml2ZS9zcmMvbGliL2NvbXBvbmVudC9ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFRL0QsTUFBTSxPQUFPLFFBQVMsU0FBUSxzQkFBNEI7SUFDeEQsSUFDSSxDQUFDLENBQUMsS0FBeUM7UUFDN0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQUksQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQ0ksQ0FBQyxDQUFDLEtBQXlDO1FBQzdDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxZQUFZLElBQVksRUFBRSxNQUFrQjtRQUMxQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDOzhHQXZCVSxRQUFRO2tHQUFSLFFBQVE7OzJGQUFSLFFBQVE7a0JBTHBCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjtzSEFHSyxDQUFDO3NCQURKLEtBQUs7Z0JBU0YsQ0FBQztzQkFESixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJpdmVDYW52YXMgfSBmcm9tICcuLi9jYW52YXMnO1xyXG5pbXBvcnQgeyBSaXZlVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi90cmFuc2Zvcm0tY29tcG9uZW50JztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0ByaXZlLWFwcC9jYW52YXMtYWR2YW5jZWQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ3Jpdi1ub2RlLCBbcml2Tm9kZV0nLFxyXG4gICAgZXhwb3J0QXM6ICdyaXZOb2RlJyxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIFJpdmVOb2RlIGV4dGVuZHMgUml2ZVRyYW5zZm9ybUNvbXBvbmVudDxOb2RlPiB7XHJcbiAgQElucHV0KClcclxuICBzZXQgeCh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5zZXQoJ3gnLCB2YWx1ZSk7XHJcbiAgfVxyXG4gIGdldCB4KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Py54O1xyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgeSh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5zZXQoJ3knLCB2YWx1ZSk7XHJcbiAgfVxyXG4gIGdldCB5KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Py55O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Ioem9uZTogTmdab25lLCBjYW52YXM6IFJpdmVDYW52YXMpIHtcclxuICAgIHN1cGVyKHpvbmUsIGNhbnZhcyk7XHJcbiAgfVxyXG5cclxuICBnZXRDb21wb25lbnQobmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW52YXMuYXJ0Ym9hcmQ/Lm5vZGUobmFtZSk7XHJcbiAgfVxyXG5cclxufSJdfQ==