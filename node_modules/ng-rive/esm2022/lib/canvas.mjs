import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { Observable, BehaviorSubject, from } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { RiveService } from './service';
import { getClientCoordinates, toInt } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./service";
const exist = (v) => v !== null && v !== undefined;
const onVisible = (element) => new Promise((res, rej) => {
    // SSR
    if (typeof window === 'undefined') {
        return res(false);
    }
    // Compatibility
    if (!('IntersectionObserver' in window)) {
        return res(true);
    }
    let isVisible = false;
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            const visible = entry.intersectionRatio !== 0;
            if (visible !== isVisible) {
                res(isVisible);
                observer.disconnect();
            }
        });
    }, { threshold: [0] });
    // start observing element visibility
    observer.observe(element);
});
// Force event to run inside zones
export function enterZone(zone) {
    return (source) => new Observable(observer => source.subscribe({
        next: (x) => zone.run(() => observer.next(x)),
        error: (err) => observer.error(err),
        complete: () => observer.complete()
    }));
}
export class RiveCanvas {
    set riv(url) {
        this.url.next(url);
    }
    set name(name) {
        this.arboardName.next(name);
    }
    set width(w) {
        const width = toInt(w) ?? this.canvas.width;
        this.canvas.width = width;
    }
    get width() {
        return this.canvas.width;
    }
    set height(h) {
        const height = toInt(h) ?? this.canvas.height;
        this.canvas.height = height;
    }
    get height() {
        return this.canvas.height;
    }
    pointerMove(event) {
        const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerMove' in sm);
        if (!stateMachines.length)
            return;
        const vector = this.getTransform(event);
        if (!vector)
            return;
        for (const stateMachine of stateMachines) {
            stateMachine.pointerMove(vector.x, vector.y);
        }
    }
    pointerDown(event) {
        const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerDown' in sm);
        if (!stateMachines.length)
            return;
        const vector = this.getTransform(event);
        if (!vector)
            return;
        for (const stateMachine of stateMachines) {
            stateMachine.pointerDown(vector.x, vector.y);
        }
    }
    pointerUp(event) {
        const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerUp' in sm);
        if (!stateMachines.length)
            return;
        const vector = this.getTransform(event);
        if (!vector)
            return;
        for (const stateMachine of stateMachines) {
            stateMachine.pointerUp(vector.x, vector.y);
        }
    }
    constructor(service, element) {
        this.service = service;
        this.url = new BehaviorSubject(null);
        this.arboardName = new BehaviorSubject(null);
        this.boxes = {};
        // Keep track of current state machine for event listeners
        this.stateMachines = {};
        this.viewbox = '0 0 100% 100%';
        this.lazy = false;
        this.fit = 'contain';
        this.alignment = 'center';
        this.artboardChange = new EventEmitter();
        this.canvas = element.nativeElement;
        this.whenVisible = onVisible(element.nativeElement);
        this.loaded = this.url.pipe(filter(exist), distinctUntilChanged(), filter(() => typeof window !== 'undefined' && !!this.ctx), // Make sure it's not ssr
        switchMap(async (url) => {
            this.file = await this.service.load(url);
            this.rive = this.service.rive;
            if (!this.rive)
                throw new Error('Service could not load rive');
            // TODO: set offscreen renderer to true for webgl
            this.renderer = this.rive.makeRenderer(this.canvas);
        }), switchMap(_ => this.setArtboard()), shareReplay({ bufferSize: 1, refCount: true }));
    }
    ngOnInit() {
        this.onReady();
    }
    ngOnDestroy() {
        // Timeout to avoid late request to a deleted artboard
        setTimeout(() => {
            this.renderer?.delete();
            this.artboard?.delete();
            this.file?.delete();
        }, 100);
    }
    get ctx() {
        if (!this._ctx) {
            this._ctx = this.canvas.getContext('2d');
        }
        return this._ctx;
    }
    setArtboard() {
        return this.arboardName.pipe(tap(() => this.artboard?.delete()), // Remove previous artboard if any
        map(name => name ? this.file?.artboardByName(name) : this.file?.defaultArtboard()), tap(artboard => this.artboard = artboard), tap(() => this.artboardChange.emit(this.artboard)), map(() => true));
    }
    /**
     * Calculate the box of the canvas based on viewbox, width and height
     * It memorizes the values to avoid recalculation for each frame
     */
    get box() {
        const w = this.width;
        const h = this.height;
        const boxId = `${this.viewbox} ${w} ${h}`;
        if (!this.boxes[boxId]) {
            const bounds = this.viewbox.split(' ');
            if (bounds.length !== 4)
                throw new Error('View box should look like "0 0 100% 100%"');
            const [minX, minY, maxX, maxY] = bounds.map((v, i) => {
                const size = i % 2 === 0 ? w : h;
                const percentage = v.endsWith('%')
                    ? parseInt(v.slice(0, -1), 10) / 100
                    : parseInt(v, 10) / size;
                return i < 2 ? -size * percentage : size / percentage;
            });
            this.boxes[boxId] = { minX, minY, maxX, maxY };
        }
        return this.boxes[boxId];
    }
    get isLazy() {
        return this.lazy === true || this.lazy === '';
    }
    get count() {
        return this.artboard?.animationCount();
    }
    onReady() {
        if (this.isLazy) {
            return from(this.whenVisible).pipe(filter(isVisible => isVisible), switchMap(() => this.loaded));
        }
        return this.loaded;
    }
    draw(instance, delta, mix) {
        if (!this.rive)
            throw new Error('Could not load rive before registrating instance');
        if (!this.artboard)
            throw new Error('Could not load artboard before registrating instance');
        if (!this.renderer)
            throw new Error('Could not load renderer before registrating instance');
        this.renderer.clear();
        // Move frame
        if (isLinearAnimation(instance)) {
            instance.advance(delta);
            instance.apply(mix ?? 1);
        }
        else {
            instance.advance(delta);
        }
        this.artboard.advance(delta);
        // Render frame on canvas
        this.renderer.save();
        // Align renderer if needed
        const fit = this.rive.Fit[this.fit];
        const alignment = this.rive.Alignment[this.alignment];
        const box = this.box;
        const bounds = this.artboard.bounds;
        this.renderer.align(fit, alignment, box, bounds);
        this.artboard.draw(this.renderer);
        this.renderer.restore();
        // TODO: If context is WebGL Flush
        // this.renderer.flush();
    }
    getTransform(event) {
        if (!this.rive)
            return;
        if (!this.artboard)
            return;
        const boundingRect = this.canvas.getBoundingClientRect();
        const { clientX, clientY } = getClientCoordinates(event);
        if (!clientX && !clientY)
            return;
        const canvasX = clientX - boundingRect.left;
        const canvasY = clientY - boundingRect.top;
        const forwardMatrix = this.rive.computeAlignment(this.rive.Fit[this.fit], this.rive.Alignment[this.alignment], {
            minX: 0,
            minY: 0,
            maxX: boundingRect.width,
            maxY: boundingRect.height,
        }, this.artboard.bounds);
        const invertedMatrix = new this.rive.Mat2D();
        forwardMatrix.invert(invertedMatrix);
        const canvasCoordinatesVector = new this.rive.Vec2D(canvasX, canvasY);
        const transformedVector = this.rive.mapXY(invertedMatrix, canvasCoordinatesVector);
        const x = transformedVector.x();
        const y = transformedVector.y();
        transformedVector.delete();
        invertedMatrix.delete();
        canvasCoordinatesVector.delete();
        forwardMatrix.delete();
        return { x, y };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveCanvas, deps: [{ token: i1.RiveService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveCanvas, isStandalone: true, selector: "canvas[riv]", inputs: { riv: "riv", name: ["artboard", "name"], viewbox: "viewbox", lazy: "lazy", fit: "fit", alignment: "alignment", width: "width", height: "height" }, outputs: { artboardChange: "artboardChange" }, host: { listeners: { "touchmove": "pointerMove($event)", "mouseover": "pointerMove($event)", "mouseout": "pointerMove($event)", "mousemove": "pointerMove($event)", "touchstart": "pointerDown($event)", "mousedown": "pointerDown($event)", "touchend": "pointerUp($event)", "mouseup": "pointerUp($event)" } }, exportAs: ["rivCanvas"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveCanvas, decorators: [{
            type: Directive,
            args: [{
                    selector: 'canvas[riv]',
                    exportAs: 'rivCanvas',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.RiveService }, { type: i0.ElementRef }]; }, propDecorators: { riv: [{
                type: Input
            }], name: [{
                type: Input,
                args: ['artboard']
            }], viewbox: [{
                type: Input
            }], lazy: [{
                type: Input
            }], fit: [{
                type: Input
            }], alignment: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], artboardChange: [{
                type: Output
            }], pointerMove: [{
                type: HostListener,
                args: ['touchmove', ['$event']]
            }, {
                type: HostListener,
                args: ['mouseover', ['$event']]
            }, {
                type: HostListener,
                args: ['mouseout', ['$event']]
            }, {
                type: HostListener,
                args: ['mousemove', ['$event']]
            }], pointerDown: [{
                type: HostListener,
                args: ['touchstart', ['$event']]
            }, {
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], pointerUp: [{
                type: HostListener,
                args: ['touchend', ['$event']]
            }, {
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });
function isLinearAnimation(instance) {
    return 'didLoop' in instance;
}
//# sourceMappingURL=data:application/json;base64,