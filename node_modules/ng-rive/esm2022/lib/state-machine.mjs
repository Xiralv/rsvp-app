import { EventEmitter, Directive, NgZone, Output, Input, ContentChildren, QueryList, Inject, forwardRef } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { RiveCanvas } from './canvas';
import { RiveService } from './service';
import * as i0 from "@angular/core";
import * as i1 from "./canvas";
import * as i2 from "./service";
function getInput(input) {
    if (input.type === 56 /* InputTypes.Number */)
        return input.asNumber();
    if (input.type === 59 /* InputTypes.Boolean */)
        return input.asBool();
    if (input.type === 58 /* InputTypes.Trigger */)
        return input.asTrigger();
    return input;
}
function assertStateMachine(animation, artboard, name) {
    if (animation)
        return;
    const artboardName = artboard.name ?? 'Default';
    const count = artboard.stateMachineCount();
    if (typeof name === 'number') {
        throw new Error(`Provided index "${name}" for the animation of artboard "${artboardName}" is not available. Animation count is: ${count}`);
    }
    else {
        const names = [];
        for (let i = 0; i < count; i++) {
            names.push(artboard.stateMachineByIndex(i).name);
        }
        throw new Error(`Provided name "${name}" for the animation of artboard "${artboardName}" is not available. Availables names are: ${JSON.stringify(names)}`);
    }
}
export class RiveSMInput {
    set name(name) {
        if (!name)
            return;
        this._name = name;
        if (this.input)
            return;
        this.init(this.stateMachine.inputs[name]);
    }
    get name() {
        return this.input?.name ?? this._name;
    }
    set value(rawValue) {
        if (typeof rawValue === 'undefined' || rawValue === null)
            return;
        const value = typeof rawValue === 'string'
            ? parseFloat(rawValue)
            : rawValue;
        if (this.input) {
            this.input.value = value;
            this.change.emit(this.input);
        }
        else {
            this._value = value;
        }
    }
    get value() {
        return this.input?.value ?? this._value;
    }
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        this.change = new EventEmitter();
        this.load = new EventEmitter();
    }
    /** @internal: Used by the RiveStateMachine */
    init(input) {
        if (!input || input.name === this.input?.name)
            return;
        this.input = getInput(input);
        this.load.emit(input);
        if (typeof this._value !== 'undefined') {
            this.input.value = this._value;
            this.change.emit(this.input);
        }
        if (this.shouldFire) {
            this.shouldFire(input);
            delete this.shouldFire;
        }
    }
    fire() {
        const fire = (input) => {
            if (input.type === 58 /* InputTypes.Trigger */) {
                input.fire();
                this.change.emit(input);
            }
        };
        this.input
            ? fire(this.input)
            : this.shouldFire = fire;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveSMInput, deps: [{ token: forwardRef(() => RiveStateMachine) }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveSMInput, isStandalone: true, selector: "riv-input, [rivInput]", inputs: { name: "name", value: "value" }, outputs: { change: "change", load: "load" }, exportAs: ["rivInput"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveSMInput, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-input, [rivInput]',
                    exportAs: 'rivInput',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: RiveStateMachine, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => RiveStateMachine)]
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], value: [{
                type: Input
            }], change: [{
                type: Output
            }], load: [{
                type: Output
            }] } });
function exist(v) {
    return v !== undefined && v !== null;
}
export class RiveStateMachine {
    set name(name) {
        if (typeof name !== 'string')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(name);
        });
    }
    set index(value) {
        const index = typeof value === 'string' ? parseInt(value) : value;
        if (typeof index !== 'number')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(index);
        });
    }
    set speed(value) {
        const speed = typeof value === 'string' ? parseFloat(value) : value;
        if (typeof speed === 'number')
            this.update({ speed });
    }
    get speed() {
        return this.state.getValue().speed;
    }
    set play(playing) {
        if (playing === true || playing === '') {
            this.update({ playing: true });
        }
        else if (playing === false) {
            this.update({ playing: false });
        }
    }
    get play() {
        return this.state.getValue().playing;
    }
    constructor(zone, canvas, service) {
        this.zone = zone;
        this.canvas = canvas;
        this.service = service;
        this.state = new BehaviorSubject({ speed: 1, playing: false });
        this.inputs = {};
        this.load = new EventEmitter();
        this.stateChange = new EventEmitter();
    }
    ngOnDestroy() {
        const name = this.instance?.name;
        if (name)
            delete this.canvas.stateMachines[name];
        this.sub?.unsubscribe();
        setTimeout(() => this.instance?.delete(), 100);
    }
    update(state) {
        this.state.next({ ...this.state.getValue(), ...state });
    }
    setInput(input) {
        this.inputs[input.name] = input;
        const riveInput = this.riveInputs?.find(item => item.name === input.name);
        if (riveInput) {
            riveInput.init(input);
        }
    }
    getFrame(state) {
        if (state.playing && this.service.frame) {
            return this.service.frame.pipe(map((time) => [state, time]));
        }
        else {
            return of(null);
        }
    }
    initStateMachine(name) {
        if (!this.canvas.rive)
            throw new Error('Could not load state machine instance before rive');
        if (!this.canvas.artboard)
            throw new Error('Could not load state machine instance before artboard');
        const ref = typeof name === 'string'
            ? this.canvas.artboard.stateMachineByName(name)
            : this.canvas.artboard.stateMachineByIndex(name);
        assertStateMachine(ref, this.canvas.artboard, name);
        // Fetch the inputs from the runtime if we don't have them
        this.instance = new this.canvas.rive.StateMachineInstance(ref, this.canvas.artboard);
        this.canvas.stateMachines[this.instance.name] = this.instance;
        for (let i = 0; i < this.instance.inputCount(); i++) {
            this.setInput(this.instance.input(i));
        }
        this.load.emit(this.instance);
    }
    register(name) {
        // Stop subscribing to previous animation if any
        this.sub?.unsubscribe();
        // Update on frame change if playing
        const onFrameChange = this.state.pipe(switchMap((state) => this.getFrame(state)), filter(exist), map(([state, time]) => (time / 1000) * state.speed));
        // Wait for canvas & animation to be loaded
        this.sub = this.canvas.onReady().pipe(map(() => this.initStateMachine(name)), switchMap(() => onFrameChange)).subscribe((delta) => this.applyChange(delta));
    }
    applyChange(delta) {
        if (!this.instance)
            throw new Error('Could not load state machin instance before running it');
        this.canvas.draw(this.instance, delta);
        // Check for any state machines that had a state change
        const changeCount = this.instance.stateChangedCount();
        if (changeCount) {
            const states = [];
            for (let i = 0; i < changeCount; i++) {
                states.push(this.instance.stateChangedNameByIndex(i));
            }
            this.stateChange.emit(states);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveStateMachine, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }, { token: i2.RiveService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveStateMachine, isStandalone: true, selector: "riv-state-machine, [rivStateMachine]", inputs: { name: "name", index: "index", speed: "speed", play: "play" }, outputs: { load: "load", stateChange: "stateChange" }, queries: [{ propertyName: "riveInputs", predicate: RiveSMInput }], exportAs: ["rivStateMachine"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveStateMachine, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-state-machine, [rivStateMachine]',
                    exportAs: 'rivStateMachine',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }, { type: i2.RiveService }]; }, propDecorators: { riveInputs: [{
                type: ContentChildren,
                args: [RiveSMInput]
            }], load: [{
                type: Output
            }], stateChange: [{
                type: Output
            }], name: [{
                type: Input
            }], index: [{
                type: Input
            }], speed: [{
                type: Input
            }], play: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,