import { Directive, EventEmitter, Input, NgZone, Output } from "@angular/core";
import { BehaviorSubject, of } from "rxjs";
import { filter, map, switchMap } from "rxjs/operators";
import { RiveCanvas } from './canvas';
import { RiveService } from "./service";
import * as i0 from "@angular/core";
import * as i1 from "./canvas";
import * as i2 from "./service";
function getRiveAnimationState(state = {}) {
    return {
        speed: 1,
        playing: false,
        mix: 1,
        ...state
    };
}
function exist(v) {
    return v !== undefined && v !== null;
}
function assertAnimation(animation, artboard, name) {
    if (animation)
        return;
    const artboardName = artboard.name ?? 'Default';
    const count = artboard.animationCount();
    if (typeof name === 'number') {
        throw new Error(`Provided index "${name}" for the animation of artboard "${artboardName}" is not available. Animation count is: ${count}`);
    }
    else {
        const names = [];
        for (let i = 0; i < count; i++) {
            names.push(artboard.animationByIndex(i).name);
        }
        throw new Error(`Provided name "${name}" for the animation of artboard "${artboardName}" is not available. Availables names are: ${JSON.stringify(names)}`);
    }
}
export class RiveLinearAnimation {
    /**
     * Name of the rive animation in the current Artboard
     * Either use name or index to select an animation
     */
    set name(name) {
        if (typeof name !== 'string')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(name);
        });
    }
    /**
     * Index of the rive animation in the current Artboard
     * Either use index of name to select an animation
     */
    set index(value) {
        const index = typeof value === 'string' ? parseInt(value) : value;
        if (typeof index !== 'number')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(index);
        });
    }
    /** The mix of this animation in the current arboard */
    set mix(value) {
        const mix = typeof value === 'string' ? parseFloat(value) : value;
        if (mix && mix >= 0 && mix <= 1)
            this.update({ mix });
    }
    get mix() {
        return this.state.getValue().mix;
    }
    /** Multiplicator for the speed of the animation */
    set speed(value) {
        const speed = typeof value === 'string' ? parseFloat(value) : value;
        if (typeof speed === 'number')
            this.update({ speed });
    }
    get speed() {
        return this.state.getValue().speed;
    }
    /** If true, this animation is playing */
    set play(playing) {
        if (playing === true || playing === '') {
            this.update({ playing: true });
        }
        else if (playing === false) {
            this.update({ playing: false });
        }
    }
    get play() {
        return this.state.getValue().playing;
    }
    constructor(zone, canvas, service) {
        this.zone = zone;
        this.canvas = canvas;
        this.service = service;
        this.distance = new BehaviorSubject(null);
        this.state = new BehaviorSubject(getRiveAnimationState());
        /** Emit when the LinearAnimation has been instantiated */
        this.load = new EventEmitter();
    }
    ngOnDestroy() {
        this.sub?.unsubscribe();
        this.instance?.delete();
        setTimeout(() => this.instance?.delete(), 100);
    }
    update(state) {
        const next = getRiveAnimationState({ ...this.state.getValue(), ...state });
        this.state.next(next);
    }
    getFrame(state) {
        if (state.playing && this.service.frame) {
            return this.service.frame.pipe(map((time) => [state, time]));
        }
        else {
            return of(null);
        }
    }
    initAnimation(name) {
        if (!this.canvas.rive)
            throw new Error('Could not load animation instance before rive');
        if (!this.canvas.artboard)
            throw new Error('Could not load animation instance before artboard');
        const ref = typeof name === 'string'
            ? this.canvas.artboard.animationByName(name)
            : this.canvas.artboard.animationByIndex(name);
        assertAnimation(ref, this.canvas.artboard, name);
        this.instance = new this.canvas.rive.LinearAnimationInstance(ref, this.canvas.artboard);
        this.load.emit(this.instance);
    }
    register(name) {
        // Stop subscribing to previous animation if any
        this.sub?.unsubscribe();
        // Update on frame change if playing
        const onFrameChange = this.state.pipe(switchMap((state) => this.getFrame(state)), filter(exist), map(([state, time]) => (time / 1000) * state.speed));
        // Wait for canvas & animation to be loaded
        this.sub = this.canvas.onReady().pipe(map(() => this.initAnimation(name)), switchMap(() => onFrameChange)).subscribe((delta) => this.applyChange(delta));
    }
    applyChange(delta) {
        if (!this.instance)
            throw new Error('Could not load animation instance before running it');
        this.canvas.draw(this.instance, delta, this.state.getValue().mix);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveLinearAnimation, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }, { token: i2.RiveService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RiveLinearAnimation, isStandalone: true, selector: "riv-animation, [rivAnimation]", inputs: { name: "name", index: "index", mix: "mix", speed: "speed", play: "play" }, outputs: { load: "load" }, exportAs: ["rivAnimation"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RiveLinearAnimation, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-animation, [rivAnimation]',
                    exportAs: 'rivAnimation',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }, { type: i2.RiveService }]; }, propDecorators: { name: [{
                type: Input
            }], index: [{
                type: Input
            }], mix: [{
                type: Input
            }], speed: [{
                type: Input
            }], play: [{
                type: Input
            }], load: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,