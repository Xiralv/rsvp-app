export function toInt(value) {
    const v = typeof value === 'string' ? parseInt(value) : value;
    if (typeof v !== 'number')
        return;
    return v;
}
export function toFloat(value) {
    const v = typeof value === 'string' ? parseFloat(value) : value;
    if (typeof v !== 'number')
        return;
    return v;
}
export function toBool(value) {
    if (value === '' || value === true)
        return true;
    if (value === false)
        return false;
    return;
}
export function getAnimations(artboard) {
    const animations = [];
    if (!artboard)
        return [];
    const max = artboard.animationCount();
    for (let i = 0; i < max; i++) {
        animations.push(artboard.animationByIndex(i));
    }
    return animations;
}
export function getStateMachines(artboard) {
    const stateMachines = [];
    if (!artboard)
        return [];
    const max = artboard.stateMachineCount();
    for (let i = 0; i < max; i++) {
        stateMachines.push(artboard.stateMachineByIndex(i));
    }
    return stateMachines;
}
export function getClientCoordinates(event) {
    if (["touchstart", "touchmove"].indexOf(event.type) > -1 &&
        event.touches?.length) {
        event.preventDefault();
        return {
            clientX: event.touches[0].clientX,
            clientY: event.touches[0].clientY,
        };
    }
    else if (event.type === "touchend" &&
        event.changedTouches?.length) {
        return {
            clientX: event.changedTouches[0].clientX,
            clientY: event.changedTouches[0].clientY,
        };
    }
    else {
        return {
            clientX: event.clientX,
            clientY: event.clientY,
        };
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nLXJpdmUvc3JjL2xpYi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsS0FBSyxDQUFDLEtBQXlDO0lBQzdELE1BQU0sQ0FBQyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDOUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRO1FBQUUsT0FBTztJQUNsQyxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQXlDO0lBQy9ELE1BQU0sQ0FBQyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDaEUsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRO1FBQUUsT0FBTztJQUNsQyxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEtBQXNDO0lBQzNELElBQUksS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ2hELElBQUksS0FBSyxLQUFLLEtBQUs7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNsQyxPQUFPO0FBQ1QsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsUUFBbUI7SUFDL0MsTUFBTSxVQUFVLEdBQXNCLEVBQUUsQ0FBQztJQUN6QyxJQUFJLENBQUMsUUFBUTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0M7SUFDRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLFFBQW1CO0lBQ2xELE1BQU0sYUFBYSxHQUFtQixFQUFFLENBQUM7SUFDekMsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUN6QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDckQ7SUFDRCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDO0FBUUQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEtBQThCO0lBQ2pFLElBQ0UsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkQsS0FBb0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUNyQztRQUNBLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixPQUFPO1lBQ0wsT0FBTyxFQUFHLEtBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87WUFDakQsT0FBTyxFQUFHLEtBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87U0FDbEQsQ0FBQztLQUNIO1NBQU0sSUFDTCxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVU7UUFDeEIsS0FBb0IsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUM1QztRQUNBLE9BQU87WUFDTCxPQUFPLEVBQUcsS0FBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztZQUN4RCxPQUFPLEVBQUcsS0FBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztTQUN6RCxDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU87WUFDTCxPQUFPLEVBQUcsS0FBb0IsQ0FBQyxPQUFPO1lBQ3RDLE9BQU8sRUFBRyxLQUFvQixDQUFDLE9BQU87U0FDdkMsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcnRib2FyZCwgTGluZWFyQW5pbWF0aW9uLCBTdGF0ZU1hY2hpbmUgfSBmcm9tIFwiQHJpdmUtYXBwL2NhbnZhcy1hZHZhbmNlZFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvSW50KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsKSB7XHJcbiAgY29uc3QgdiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUludCh2YWx1ZSkgOiB2YWx1ZTtcclxuICBpZiAodHlwZW9mIHYgIT09ICdudW1iZXInKSByZXR1cm47XHJcbiAgcmV0dXJuIHY7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Zsb2F0KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsKSB7XHJcbiAgY29uc3QgdiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IHZhbHVlO1xyXG4gIGlmICh0eXBlb2YgdiAhPT0gJ251bWJlcicpIHJldHVybjtcclxuICByZXR1cm4gdjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbCh2YWx1ZTogJycgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IHRydWUpIHJldHVybiB0cnVlO1xyXG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcclxuICByZXR1cm47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmltYXRpb25zKGFydGJvYXJkPzogQXJ0Ym9hcmQpIHtcclxuICBjb25zdCBhbmltYXRpb25zOiBMaW5lYXJBbmltYXRpb25bXSA9IFtdO1xyXG4gIGlmICghYXJ0Ym9hcmQpIHJldHVybiBbXTtcclxuICBjb25zdCBtYXggPSBhcnRib2FyZC5hbmltYXRpb25Db3VudCgpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcclxuICAgIGFuaW1hdGlvbnMucHVzaChhcnRib2FyZC5hbmltYXRpb25CeUluZGV4KGkpKTtcclxuICB9XHJcbiAgcmV0dXJuIGFuaW1hdGlvbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0ZU1hY2hpbmVzKGFydGJvYXJkPzogQXJ0Ym9hcmQpIHtcclxuICBjb25zdCBzdGF0ZU1hY2hpbmVzOiBTdGF0ZU1hY2hpbmVbXSA9IFtdO1xyXG4gIGlmICghYXJ0Ym9hcmQpIHJldHVybiBbXTtcclxuICBjb25zdCBtYXggPSBhcnRib2FyZC5zdGF0ZU1hY2hpbmVDb3VudCgpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcclxuICAgIHN0YXRlTWFjaGluZXMucHVzaChhcnRib2FyZC5zdGF0ZU1hY2hpbmVCeUluZGV4KGkpKTtcclxuICB9XHJcbiAgcmV0dXJuIHN0YXRlTWFjaGluZXM7XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgQ2xpZW50Q29vcmRpbmF0ZXMge1xyXG4gIGNsaWVudFg6IG51bWJlcjtcclxuICBjbGllbnRZOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnRDb29yZGluYXRlcyhldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpOiBDbGllbnRDb29yZGluYXRlcyB7XHJcbiAgaWYgKFxyXG4gICAgW1widG91Y2hzdGFydFwiLCBcInRvdWNobW92ZVwiXS5pbmRleE9mKGV2ZW50LnR5cGUpID4gLTEgJiZcclxuICAgIChldmVudCBhcyBUb3VjaEV2ZW50KS50b3VjaGVzPy5sZW5ndGhcclxuICApIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjbGllbnRYOiAoZXZlbnQgYXMgVG91Y2hFdmVudCkudG91Y2hlc1swXS5jbGllbnRYLFxyXG4gICAgICBjbGllbnRZOiAoZXZlbnQgYXMgVG91Y2hFdmVudCkudG91Y2hlc1swXS5jbGllbnRZLFxyXG4gICAgfTtcclxuICB9IGVsc2UgaWYgKFxyXG4gICAgZXZlbnQudHlwZSA9PT0gXCJ0b3VjaGVuZFwiICYmXHJcbiAgICAoZXZlbnQgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXM/Lmxlbmd0aFxyXG4gICkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2xpZW50WDogKGV2ZW50IGFzIFRvdWNoRXZlbnQpLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFgsXHJcbiAgICAgIGNsaWVudFk6IChldmVudCBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZLFxyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2xpZW50WDogKGV2ZW50IGFzIE1vdXNlRXZlbnQpLmNsaWVudFgsXHJcbiAgICAgIGNsaWVudFk6IChldmVudCBhcyBNb3VzZUV2ZW50KS5jbGllbnRZLFxyXG4gICAgfTtcclxuICB9XHJcbn07Il19