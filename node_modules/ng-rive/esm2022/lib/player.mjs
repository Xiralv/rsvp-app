import { Directive, EventEmitter, Input, NgZone, Output } from "@angular/core";
import { BehaviorSubject, merge, of } from "rxjs";
import { distinctUntilChanged, filter, map, switchMap, tap } from "rxjs/operators";
import { RiveCanvas } from './canvas';
import { RiveService } from "./service";
import * as i0 from "@angular/core";
import * as i1 from "./canvas";
import * as i2 from "./service";
function getRivePlayerState(state = {}) {
    return {
        speed: 1,
        playing: false,
        mix: 1,
        autoreset: false,
        ...state
    };
}
export function frameToSec(frame, fps) {
    return frame / fps;
}
export function round(value) {
    return Math.round((value + Number.EPSILON) * 10000) / 10000;
}
function exist(v) {
    return v !== undefined && v !== null;
}
function getStart(animation) {
    if (!animation.workStart || animation.workStart === -1)
        return 0;
    return round(animation.workStart / animation.fps);
}
function getEnd(animation) {
    const end = (!animation.workEnd || animation.workEnd === -1) ? animation.duration : animation.workEnd;
    return round(end / animation.fps);
}
export class RivePlayer {
    /**
     * Name of the rive animation in the current Artboard
     * Either use name or index to select an animation
     */
    set name(name) {
        if (typeof name !== 'string')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(name);
        });
    }
    /**
     * Index of the rive animation in the current Artboard
     * Either use index of name to select an animation
     */
    set index(value) {
        const index = typeof value === 'string' ? parseInt(value) : value;
        if (typeof index !== 'number')
            return;
        this.zone.runOutsideAngular(() => {
            this.register(index);
        });
    }
    /** The mix of this animation in the current arboard */
    set mix(value) {
        const mix = typeof value === 'string' ? parseFloat(value) : value;
        if (mix && mix >= 0 && mix <= 1)
            this.update({ mix });
    }
    get mix() {
        return this.state.getValue().mix;
    }
    /** Multiplicator of the speed for the animation */
    set speed(value) {
        const speed = typeof value === 'string' ? parseFloat(value) : value;
        if (typeof speed === 'number')
            this.update({ speed });
    }
    get speed() {
        return this.state.getValue().speed;
    }
    set play(playing) {
        if (playing === true || playing === '') {
            this.update({ playing: true });
        }
        else if (playing === false) {
            this.update({ playing: false });
        }
    }
    get play() {
        return this.state.getValue().playing;
    }
    set time(value) {
        const time = typeof value === 'string' ? parseFloat(value) : value;
        if (typeof time === 'number')
            this.distance.next(time);
    }
    /**
     * @deprecated This will be removed
     * Consider using StateMachine instead
     */
    set autoreset(autoreset) {
        if (autoreset === true || autoreset === '') {
            this.update({ autoreset: true });
        }
        else if (autoreset === false) {
            this.update({ autoreset: false });
        }
    }
    get autoreset() {
        return this.state.getValue().autoreset;
    }
    /**
     * @deprecated This will be removed
     * Consider using StateMachine instead
     */
    set mode(mode) {
        if (mode)
            this.update({ mode });
    }
    get mode() {
        return this.state.getValue().mode;
    }
    constructor(zone, canvas, service) {
        this.zone = zone;
        this.canvas = canvas;
        this.service = service;
        this.distance = new BehaviorSubject(null);
        this.state = new BehaviorSubject(getRivePlayerState());
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.load = new EventEmitter();
        this.timeChange = new EventEmitter();
        this.playChange = new EventEmitter();
        this.speedChange = new EventEmitter();
    }
    ngOnDestroy() {
        this.sub?.unsubscribe();
        setTimeout(() => this.instance?.delete(), 100);
    }
    update(state) {
        const next = getRivePlayerState({ ...this.state.getValue(), ...state });
        this.state.next(next);
    }
    initAnimation(name) {
        if (!this.service.rive)
            throw new Error('Could not load animation instance before rive');
        if (!this.canvas.artboard)
            throw new Error('Could not load animation instance before artboard');
        const ref = typeof name === 'string'
            ? this.canvas.artboard.animationByName(name)
            : this.canvas.artboard.animationByIndex(name);
        this.animation = ref;
        this.instance = new this.service.rive.LinearAnimationInstance(ref, this.canvas.artboard);
        this.startTime = getStart(this.instance);
        this.endTime = getEnd(this.instance);
        this.load.emit(this.instance);
    }
    getFrame(state) {
        if (state.playing && this.service.frame) {
            return this.service.frame.pipe(map((time) => [state, time]));
        }
        else {
            return of(null);
        }
    }
    register(name) {
        this.sub?.unsubscribe(); // Stop subscribing to previous animation if any
        this.instance?.delete(); // Remove old instance if any
        // Update if time have changed from the input
        const onTimeChange = this.distance.pipe(filter(exist), distinctUntilChanged(), map(time => time - this.instance.time));
        // Update on frame change if playing
        const onFrameChange = this.state.pipe(switchMap((state) => this.getFrame(state)), filter(exist), map(([state, time]) => this.moveFrame(state, time)), tap((delta) => {
            this.zone.run(() => this.timeChange.emit(this.instance.time + delta));
        }));
        // Wait for canvas & animation to be loaded
        this.sub = this.canvas.onReady().pipe(map(() => this.initAnimation(name)), switchMap(() => merge(onTimeChange, onFrameChange))).subscribe((delta) => this.applyChange(delta));
    }
    moveFrame(state, time) {
        if (!this.instance)
            throw new Error('Could not load animation instance before running it');
        if (!this.animation)
            throw new Error('Could not load animation before running it');
        const { speed, autoreset, mode } = state;
        // Default mode, don't apply any logic
        if (!mode)
            return time / 1000 * speed;
        let delta = (time / 1000) * speed;
        // Round to avoid JS error on division
        const start = this.startTime ?? 0;
        const end = this.endTime ?? (this.instance.duration / this.instance.fps);
        const currentTime = round(this.instance.time);
        // When player hit floor
        if (currentTime + delta < start) {
            if (mode === 'loop' && speed < 0 && end) {
                delta = end - currentTime; // end - currentTime
            }
            else if (mode === 'ping-pong') {
                delta = -delta;
                this.update({ speed: -speed });
                this.zone.run(() => this.speedChange.emit(-speed));
            }
            else if (mode === 'one-shot') {
                this.update({ playing: false });
                this.zone.run(() => this.playChange.emit(false));
                delta = start - currentTime;
            }
        }
        // Put before "hit last frame" else currentTime + delta > end
        if (mode === 'one-shot' && autoreset) {
            if (speed > 0 && currentTime === end) {
                delta = start - end;
            }
            if (speed < 0 && currentTime === start) {
                delta = end - start;
            }
        }
        // When player hit last frame
        if (currentTime + delta > end) {
            if (mode === 'loop' && speed > 0) {
                delta = start - currentTime;
            }
            else if (mode === 'ping-pong') {
                delta = -delta;
                this.update({ speed: -speed });
                this.zone.run(() => this.speedChange.emit(-speed));
            }
            else if (mode === 'one-shot') {
                this.update({ playing: false });
                this.zone.run(() => this.playChange.emit(false));
                delta = end - currentTime;
            }
        }
        return delta;
    }
    applyChange(delta) {
        // We need to use requestAnimationFrame when delta is changed by the time
        this.service.rive?.requestAnimationFrame(() => {
            if (!this.instance)
                throw new Error('Could not load animation instance before running it');
            this.canvas.draw(this.instance, delta, this.state.getValue().mix);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RivePlayer, deps: [{ token: i0.NgZone }, { token: i1.RiveCanvas }, { token: i2.RiveService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: RivePlayer, isStandalone: true, selector: "riv-player, [rivPlayer]", inputs: { name: "name", index: "index", mix: "mix", speed: "speed", play: "play", time: "time", autoreset: "autoreset", mode: "mode" }, outputs: { load: "load", timeChange: "timeChange", playChange: "playChange", speedChange: "speedChange" }, exportAs: ["rivPlayer"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: RivePlayer, decorators: [{
            type: Directive,
            args: [{
                    selector: 'riv-player, [rivPlayer]',
                    exportAs: 'rivPlayer',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.RiveCanvas }, { type: i2.RiveService }]; }, propDecorators: { name: [{
                type: Input
            }], index: [{
                type: Input
            }], mix: [{
                type: Input
            }], speed: [{
                type: Input
            }], play: [{
                type: Input
            }], time: [{
                type: Input
            }], autoreset: [{
                type: Input
            }], mode: [{
                type: Input
            }], load: [{
                type: Output
            }], timeChange: [{
                type: Output
            }], playChange: [{
                type: Output
            }], speedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,