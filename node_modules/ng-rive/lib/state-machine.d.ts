import { EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { SMIInput, StateMachineInstance } from '@rive-app/canvas-advanced';
import { BehaviorSubject } from 'rxjs';
import { RiveCanvas } from './canvas';
import { RiveService } from './service';
import * as i0 from "@angular/core";
export declare class RiveSMInput {
    private stateMachine;
    private _name?;
    private _value?;
    private input?;
    private shouldFire?;
    set name(name: string | undefined);
    get name(): string | undefined;
    set value(rawValue: string | boolean | number | undefined | null);
    get value(): string | boolean | number | undefined | null;
    change: EventEmitter<SMIInput>;
    load: EventEmitter<SMIInput>;
    constructor(stateMachine: RiveStateMachine);
    /** @internal: Used by the RiveStateMachine */
    init(input?: SMIInput): void;
    fire(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RiveSMInput, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RiveSMInput, "riv-input, [rivInput]", ["rivInput"], { "name": { "alias": "name"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "change": "change"; "load": "load"; }, never, never, true, never>;
}
interface StateMachineState {
    speed: number;
    playing: boolean;
}
export declare class RiveStateMachine implements OnDestroy {
    private zone;
    private canvas;
    private service;
    private sub?;
    /** @internal: public only for RiveInput */
    instance?: StateMachineInstance;
    state: BehaviorSubject<StateMachineState>;
    inputs: Record<string, SMIInput>;
    private riveInputs?;
    load: EventEmitter<StateMachineInstance>;
    stateChange: EventEmitter<string[]>;
    set name(name: string | undefined | null);
    set index(value: number | string | undefined | null);
    set speed(value: number | string | undefined | null);
    get speed(): number | string | undefined | null;
    set play(playing: boolean | '' | undefined | null);
    get play(): boolean | '' | undefined | null;
    constructor(zone: NgZone, canvas: RiveCanvas, service: RiveService);
    ngOnDestroy(): void;
    private update;
    private setInput;
    private getFrame;
    private initStateMachine;
    private register;
    private applyChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<RiveStateMachine, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RiveStateMachine, "riv-state-machine, [rivStateMachine]", ["rivStateMachine"], { "name": { "alias": "name"; "required": false; }; "index": { "alias": "index"; "required": false; }; "speed": { "alias": "speed"; "required": false; }; "play": { "alias": "play"; "required": false; }; }, { "load": "load"; "stateChange": "stateChange"; }, ["riveInputs"], never, true, never>;
}
export {};
