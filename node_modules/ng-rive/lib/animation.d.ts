import { EventEmitter, NgZone, OnDestroy } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { RiveCanvas } from './canvas';
import { RiveService } from "./service";
import type { LinearAnimationInstance } from "@rive-app/canvas-advanced";
import * as i0 from "@angular/core";
interface RiveAnimationState {
    speed: number;
    playing: boolean;
    /** Weight of this animation over another */
    mix: number;
}
export declare class RiveLinearAnimation implements OnDestroy {
    private zone;
    private canvas;
    private service;
    private sub?;
    private instance?;
    distance: BehaviorSubject<number | null>;
    state: BehaviorSubject<RiveAnimationState>;
    /**
     * Name of the rive animation in the current Artboard
     * Either use name or index to select an animation
     */
    set name(name: string | undefined | null);
    /**
     * Index of the rive animation in the current Artboard
     * Either use index of name to select an animation
     */
    set index(value: number | string | undefined | null);
    /** The mix of this animation in the current arboard */
    set mix(value: number | string | undefined | null);
    get mix(): number | string | undefined | null;
    /** Multiplicator for the speed of the animation */
    set speed(value: number | string | undefined | null);
    get speed(): number | string | undefined | null;
    /** If true, this animation is playing */
    set play(playing: boolean | '' | undefined | null);
    get play(): boolean | '' | undefined | null;
    /** Emit when the LinearAnimation has been instantiated */
    load: EventEmitter<LinearAnimationInstance>;
    constructor(zone: NgZone, canvas: RiveCanvas, service: RiveService);
    ngOnDestroy(): void;
    private update;
    private getFrame;
    private initAnimation;
    private register;
    private applyChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<RiveLinearAnimation, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RiveLinearAnimation, "riv-animation, [rivAnimation]", ["rivAnimation"], { "name": { "alias": "name"; "required": false; }; "index": { "alias": "index"; "required": false; }; "mix": { "alias": "mix"; "required": false; }; "speed": { "alias": "speed"; "required": false; }; "play": { "alias": "play"; "required": false; }; }, { "load": "load"; }, never, never, true, never>;
}
export {};
