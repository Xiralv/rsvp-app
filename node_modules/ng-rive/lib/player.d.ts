import { EventEmitter, NgZone, OnDestroy } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { RiveCanvas } from './canvas';
import { RiveService } from "./service";
import { LinearAnimationInstance } from "@rive-app/canvas-advanced";
import * as i0 from "@angular/core";
interface RivePlayerState {
    speed: number;
    playing: boolean;
    /** Weight of this animation over another */
    mix: number;
    /** Reset automatically to 0 when play is down if mode is "one-shot" */
    autoreset: boolean;
    /** override mode of the animation */
    mode?: 'loop' | 'ping-pong' | 'one-shot';
}
export declare function frameToSec(frame: number, fps: number): number;
export declare function round(value: number): number;
export declare class RivePlayer implements OnDestroy {
    private zone;
    private canvas;
    private service;
    private sub?;
    private animation?;
    private instance?;
    startTime?: number;
    endTime?: number;
    distance: BehaviorSubject<number | null>;
    state: BehaviorSubject<RivePlayerState>;
    /**
     * Name of the rive animation in the current Artboard
     * Either use name or index to select an animation
     */
    set name(name: string | undefined | null);
    /**
     * Index of the rive animation in the current Artboard
     * Either use index of name to select an animation
     */
    set index(value: number | string | undefined | null);
    /** The mix of this animation in the current arboard */
    set mix(value: number | string | undefined | null);
    get mix(): number | string | undefined | null;
    /** Multiplicator of the speed for the animation */
    set speed(value: number | string | undefined | null);
    get speed(): number | string | undefined | null;
    set play(playing: boolean | '' | undefined | null);
    get play(): boolean | '' | undefined | null;
    set time(value: number | string | undefined | null);
    /**
     * @deprecated This will be removed
     * Consider using StateMachine instead
     */
    set autoreset(autoreset: boolean | '' | undefined | null);
    get autoreset(): boolean | '' | undefined | null;
    /**
     * @deprecated This will be removed
     * Consider using StateMachine instead
     */
    set mode(mode: RivePlayerState['mode']);
    get mode(): RivePlayerState['mode'];
    load: EventEmitter<LinearAnimationInstance>;
    timeChange: EventEmitter<number>;
    playChange: EventEmitter<boolean>;
    speedChange: EventEmitter<number>;
    constructor(zone: NgZone, canvas: RiveCanvas, service: RiveService);
    ngOnDestroy(): void;
    private update;
    private initAnimation;
    private getFrame;
    private register;
    private moveFrame;
    private applyChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<RivePlayer, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RivePlayer, "riv-player, [rivPlayer]", ["rivPlayer"], { "name": { "alias": "name"; "required": false; }; "index": { "alias": "index"; "required": false; }; "mix": { "alias": "mix"; "required": false; }; "speed": { "alias": "speed"; "required": false; }; "play": { "alias": "play"; "required": false; }; "time": { "alias": "time"; "required": false; }; "autoreset": { "alias": "autoreset"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; }, { "load": "load"; "timeChange": "timeChange"; "playChange": "playChange"; "speedChange": "speedChange"; }, never, never, true, never>;
}
export {};
