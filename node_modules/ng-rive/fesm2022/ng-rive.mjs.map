{"version":3,"file":"ng-rive.mjs","sources":["../../../../libs/ng-rive/src/lib/frame.ts","../../../../libs/ng-rive/src/lib/tokens.ts","../../../../libs/ng-rive/src/lib/service.ts","../../../../libs/ng-rive/src/lib/utils.ts","../../../../libs/ng-rive/src/lib/canvas.ts","../../../../libs/ng-rive/src/lib/player.ts","../../../../libs/ng-rive/src/lib/animation.ts","../../../../libs/ng-rive/src/lib/component/transform-component.ts","../../../../libs/ng-rive/src/lib/component/node.ts","../../../../libs/ng-rive/src/lib/component/bone.ts","../../../../libs/ng-rive/src/lib/component/root-bone.ts","../../../../libs/ng-rive/src/lib/state-machine.ts","../../../../libs/ng-rive/src/lib/module.ts","../../../../libs/ng-rive/src/ng-rive.ts"],"sourcesContent":["import { RiveCanvas as Rive } from \"@rive-app/canvas-advanced\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport const nextFrame = (rive: Rive): Promise<number> => {\r\n  return new Promise((res) => {\r\n    rive.requestAnimationFrame(res);\r\n  })\r\n}\r\n\r\n// Observable that trigger on every frame\r\nexport const animationFrame = (rive: Rive) => new Observable<number>((subscriber) => {\r\n  let start = 0;\r\n  let first = true;\r\n  const run = (time: number) => {\r\n    const delta = time - start;\r\n    start = time;\r\n    if (first) {\r\n      subscriber.next(16);  \r\n      first = false;\r\n    } else {\r\n      subscriber.next(delta); \r\n    }\r\n    // Because of bug in Chrome first value might be too big and cause issues\r\n    if (subscriber.closed) return;\r\n    rive.requestAnimationFrame(run)\r\n  }\r\n  rive.requestAnimationFrame(run);\r\n});","import { InjectionToken } from '@angular/core';\r\n\r\nexport const RIVE_FOLDER = new InjectionToken<string>('Folder with Rive files');\r\nexport const RIVE_VERSION = new InjectionToken<string>('Version used to load rive WASM');\r\nexport const RIVE_WASM = new InjectionToken<string>('Local path to rive WASM');\r\n","import RiveBuilder from '@rive-app/canvas-advanced';\r\nimport { RiveCanvas as Rive } from '@rive-app/canvas-advanced';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { animationFrame } from './frame';\r\nimport { share } from 'rxjs/operators';\r\nimport { RIVE_FOLDER, RIVE_VERSION, RIVE_WASM } from './tokens';\r\nimport { firstValueFrom, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RiveService {\r\n  private wasmPath: string;\r\n  private folder: string;\r\n  public rive?: Rive;\r\n  public frame?: Observable<number>;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Optional() @Inject(RIVE_FOLDER) folder?: string,\r\n    @Optional() @Inject(RIVE_WASM) wasmPath?: string,\r\n    @Optional() @Inject(RIVE_VERSION) version?: string,\r\n  ) {\r\n    const riveVersion = version ?? '2.4.0';\r\n    this.folder = folder ?? 'assets/rive';\r\n    this.wasmPath = wasmPath ?? `https://unpkg.com/@rive-app/canvas-advanced@${riveVersion}/rive.wasm`;\r\n  }\r\n\r\n  private async getRive() {\r\n    if (!this.rive) {\r\n      const locateFile = () => this.wasmPath;\r\n      this.rive = await RiveBuilder({ locateFile });\r\n      this.frame = animationFrame(this.rive).pipe(share());\r\n    }\r\n    return this.rive;\r\n  }\r\n\r\n  private getAsset(asset: string) {\r\n    return firstValueFrom(this.http.get(asset, { responseType: 'arraybuffer' }));\r\n  }\r\n\r\n  /** Load a riv file */\r\n  async load(file: string | File | Blob) {\r\n    // Provide the file directly\r\n    if (typeof file !== 'string') {\r\n      const [ rive, buffer ] = await Promise.all([\r\n        this.getRive(),\r\n        file.arrayBuffer(),\r\n      ]);\r\n      return rive?.load(new Uint8Array(buffer));\r\n    }\r\n\r\n    const asset = `${this.folder}/${file}.riv`;\r\n    const [ rive, buffer ] = await Promise.all([\r\n      this.getRive(),\r\n      this.getAsset(asset),\r\n    ]);\r\n    if (!rive) throw new Error('Could not load rive');\r\n    return rive.load(new Uint8Array(buffer));\r\n  }\r\n\r\n}\r\n","import { Artboard, LinearAnimation, StateMachine } from \"@rive-app/canvas-advanced\";\r\n\r\nexport function toInt(value: number | string | undefined | null) {\r\n  const v = typeof value === 'string' ? parseInt(value) : value;\r\n  if (typeof v !== 'number') return;\r\n  return v;\r\n}\r\n\r\nexport function toFloat(value: number | string | undefined | null) {\r\n  const v = typeof value === 'string' ? parseFloat(value) : value;\r\n  if (typeof v !== 'number') return;\r\n  return v;\r\n}\r\n\r\nexport function toBool(value: '' | boolean | null | undefined) {\r\n  if (value === '' || value === true) return true;\r\n  if (value === false) return false;\r\n  return;\r\n}\r\n\r\nexport function getAnimations(artboard?: Artboard) {\r\n  const animations: LinearAnimation[] = [];\r\n  if (!artboard) return [];\r\n  const max = artboard.animationCount();\r\n  for (let i = 0; i < max; i++) {\r\n    animations.push(artboard.animationByIndex(i));\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function getStateMachines(artboard?: Artboard) {\r\n  const stateMachines: StateMachine[] = [];\r\n  if (!artboard) return [];\r\n  const max = artboard.stateMachineCount();\r\n  for (let i = 0; i < max; i++) {\r\n    stateMachines.push(artboard.stateMachineByIndex(i));\r\n  }\r\n  return stateMachines;\r\n}\r\n\r\n\r\ninterface ClientCoordinates {\r\n  clientX: number;\r\n  clientY: number;\r\n}\r\n\r\nexport function getClientCoordinates(event: MouseEvent | TouchEvent): ClientCoordinates {\r\n  if (\r\n    [\"touchstart\", \"touchmove\"].indexOf(event.type) > -1 &&\r\n    (event as TouchEvent).touches?.length\r\n  ) {\r\n    event.preventDefault();\r\n    return {\r\n      clientX: (event as TouchEvent).touches[0].clientX,\r\n      clientY: (event as TouchEvent).touches[0].clientY,\r\n    };\r\n  } else if (\r\n    event.type === \"touchend\" &&\r\n    (event as TouchEvent).changedTouches?.length\r\n  ) {\r\n    return {\r\n      clientX: (event as TouchEvent).changedTouches[0].clientX,\r\n      clientY: (event as TouchEvent).changedTouches[0].clientY,\r\n    };\r\n  } else {\r\n    return {\r\n      clientX: (event as MouseEvent).clientX,\r\n      clientY: (event as MouseEvent).clientY,\r\n    };\r\n  }\r\n};","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Observable, BehaviorSubject, from } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, shareReplay, switchMap, tap } from 'rxjs/operators';\r\nimport { RiveService } from './service';\r\nimport { Artboard, CanvasRenderer, RiveCanvas as Rive, File as RiveFile, AABB, StateMachineInstance, LinearAnimationInstance } from '@rive-app/canvas-advanced';\r\nimport { getClientCoordinates, toInt } from './utils';\r\n\r\nexport type CanvasFit = 'cover' | 'contain' | 'fill' | 'fitWidth' | 'fitHeight' | 'none' | 'scaleDown';\r\nexport type CanvasAlignment = 'center' | 'topLeft' | 'topCenter' | 'topRight' | 'centerLeft' | 'centerRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight';\r\n\r\nexport type RiveOrigin = string | File | Blob | null;\r\n\r\nconst exist = <T>(v?: T | null): v is T => v !== null && v !== undefined;\r\n\r\nconst onVisible = (element: HTMLElement) => new Promise<boolean>((res, rej) => {\r\n  // SSR\r\n  if (typeof window === 'undefined') {\r\n    return res(false);\r\n  }\r\n  // Compatibility\r\n  if (!('IntersectionObserver' in window)) {\r\n    return res(true);\r\n  }\r\n  let isVisible = false;\r\n  const observer = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n      const visible = entry.intersectionRatio !== 0;\r\n      if (visible !== isVisible) {\r\n        res(isVisible);\r\n        observer.disconnect();\r\n      }\r\n    });\r\n  }, { threshold: [0] });\r\n  // start observing element visibility\r\n  observer.observe(element);\r\n});\r\n\r\n\r\n// Force event to run inside zones\r\nexport function enterZone(zone: NgZone) {\r\n  return <T>(source: Observable<T>) =>\r\n    new Observable<T>(observer =>\r\n      source.subscribe({\r\n        next: (x) => zone.run(() => observer.next(x)),\r\n        error: (err) => observer.error(err),\r\n        complete: () => observer.complete()\r\n    })\r\n   );\r\n}\r\n\r\n@Directive({\r\n    selector: 'canvas[riv]',\r\n    exportAs: 'rivCanvas',\r\n    standalone: true\r\n})\r\nexport class RiveCanvas implements OnInit, OnDestroy {\r\n  private url = new BehaviorSubject<RiveOrigin>(null);\r\n  private arboardName = new BehaviorSubject<string | null>(null);\r\n  private _ctx?: CanvasRenderingContext2D | null;\r\n  private loaded: Observable<boolean>;\r\n  private boxes: Record<string, AABB> = {};\r\n  public canvas: HTMLCanvasElement;\r\n  public rive?: Rive;\r\n  public file?: RiveFile;\r\n  public artboard?: Artboard;\r\n  public renderer?: CanvasRenderer;\r\n  // Keep track of current state machine for event listeners\r\n  public stateMachines: Record<string, StateMachineInstance> = {};\r\n\r\n  public whenVisible: Promise<boolean>;\r\n\r\n  @Input() set riv(url: RiveOrigin) {\r\n    this.url.next(url);\r\n  }\r\n\r\n  @Input('artboard') set name(name: string) {\r\n    this.arboardName.next(name);\r\n  }\r\n\r\n  @Input() viewbox = '0 0 100% 100%';\r\n  @Input() lazy: boolean | '' = false;\r\n  @Input() fit: CanvasFit = 'contain';\r\n  @Input() alignment: CanvasAlignment = 'center';\r\n\r\n  @Input()\r\n  set width(w: number | string) {\r\n    const width = toInt(w) ?? this.canvas.width;\r\n    this.canvas.width = width;\r\n  }\r\n  get width() {\r\n    return this.canvas.width;\r\n  }\r\n\r\n  @Input()\r\n  set height(h: number | string) {\r\n    const height = toInt(h) ?? this.canvas.height;\r\n    this.canvas.height = height;\r\n  }\r\n  get height() {\r\n    return this.canvas.height;\r\n  }\r\n\r\n  @Output() artboardChange = new EventEmitter<Artboard>();\r\n\r\n\r\n  @HostListener('touchmove', ['$event'])\r\n  @HostListener('mouseover', ['$event'])\r\n  @HostListener('mouseout', ['$event'])\r\n  @HostListener('mousemove', ['$event'])\r\n  private pointerMove(event: MouseEvent | TouchEvent) {\r\n    const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerMove' in sm);\r\n    if (!stateMachines.length) return;\r\n    const vector = this.getTransform(event);\r\n    if (!vector) return;\r\n    for (const stateMachine of stateMachines) {\r\n      stateMachine.pointerMove(vector.x, vector.y);\r\n    }\r\n  }\r\n\r\n  @HostListener('touchstart', ['$event'])\r\n  @HostListener('mousedown', ['$event'])\r\n  private pointerDown(event: MouseEvent | TouchEvent) {\r\n    const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerDown' in sm);\r\n    if (!stateMachines.length) return;\r\n    const vector = this.getTransform(event);\r\n    if (!vector) return;\r\n    for (const stateMachine of stateMachines) {\r\n      stateMachine.pointerDown(vector.x, vector.y);\r\n    }\r\n  }\r\n\r\n  @HostListener('touchend', ['$event'])\r\n  @HostListener('mouseup', ['$event'])\r\n  private pointerUp(event: MouseEvent | TouchEvent){\r\n    const stateMachines = Object.values(this.stateMachines).filter(sm => 'pointerUp' in sm);\r\n    if (!stateMachines.length) return;\r\n    const vector = this.getTransform(event);\r\n    if (!vector) return;\r\n    for (const stateMachine of stateMachines) {\r\n      stateMachine.pointerUp(vector.x, vector.y);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private service: RiveService,\r\n    element: ElementRef<HTMLCanvasElement>\r\n  ) {\r\n    this.canvas = element.nativeElement;\r\n\r\n    this.whenVisible = onVisible(element.nativeElement);\r\n\r\n    this.loaded = this.url.pipe(\r\n      filter(exist),\r\n      distinctUntilChanged(),\r\n      filter(() => typeof window !== 'undefined' && !!this.ctx),  // Make sure it's not ssr\r\n      switchMap(async (url) => {\r\n        this.file = await this.service.load(url);\r\n        this.rive = this.service.rive;\r\n        if (!this.rive) throw new Error('Service could not load rive');\r\n        // TODO: set offscreen renderer to true for webgl\r\n        this.renderer = this.rive.makeRenderer(this.canvas) as CanvasRenderer;\r\n      }),\r\n      switchMap(_ => this.setArtboard()),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.onReady();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Timeout to avoid late request to a deleted artboard\r\n    setTimeout(() => {\r\n      this.renderer?.delete();\r\n      this.artboard?.delete();\r\n      this.file?.delete();\r\n    }, 100);\r\n  }\r\n\r\n  get ctx(): CanvasRenderingContext2D {\r\n    if (!this._ctx) {\r\n      this._ctx = this.canvas.getContext('2d');\r\n    }\r\n    return this._ctx as CanvasRenderingContext2D;\r\n  }\r\n\r\n  private setArtboard() {\r\n    return this.arboardName.pipe(\r\n      tap(() => this.artboard?.delete()), // Remove previous artboard if any\r\n      map(name => name ? this.file?.artboardByName(name) : this.file?.defaultArtboard()),\r\n      tap(artboard => this.artboard = artboard),\r\n      tap(() => this.artboardChange.emit(this.artboard)),\r\n      map(() => true)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate the box of the canvas based on viewbox, width and height\r\n   * It memorizes the values to avoid recalculation for each frame\r\n   */\r\n  get box() {\r\n    const w = this.width as number;\r\n    const h = this.height as number;\r\n    const boxId = `${this.viewbox} ${w} ${h}`;\r\n    if (!this.boxes[boxId]) {\r\n      const bounds = this.viewbox.split(' ');\r\n      if (bounds.length !== 4) throw new Error('View box should look like \"0 0 100% 100%\"');\r\n      const [minX, minY, maxX, maxY] = bounds.map((v, i) => {\r\n        const size: number = i % 2 === 0 ? w : h;\r\n        const percentage = v.endsWith('%')\r\n          ? parseInt(v.slice(0, -1), 10) / 100\r\n          : parseInt(v, 10) / size;\r\n        return i < 2 ? -size * percentage : size / percentage;\r\n      });\r\n      this.boxes[boxId] = {minX, minY, maxX, maxY};\r\n    }\r\n    return this.boxes[boxId];\r\n  }\r\n\r\n  get isLazy() {\r\n    return this.lazy === true || this.lazy === '';\r\n  }\r\n\r\n  get count() {\r\n    return this.artboard?.animationCount();\r\n  }\r\n\r\n  onReady() {\r\n    if (this.isLazy) {\r\n      return from(this.whenVisible).pipe(\r\n        filter(isVisible => isVisible),\r\n        switchMap(() => this.loaded)\r\n      );\r\n    }\r\n    return this.loaded;\r\n  }\r\n\r\n  draw(instance: LinearAnimationInstance, delta: number, mix: number): void\r\n  draw(instance: StateMachineInstance, delta: number): void\r\n  draw(instance: StateMachineInstance | LinearAnimationInstance, delta: number, mix?: number) {\r\n    if (!this.rive) throw new Error('Could not load rive before registrating instance');\r\n    if (!this.artboard) throw new Error('Could not load artboard before registrating instance');\r\n    if (!this.renderer) throw new Error('Could not load renderer before registrating instance');\r\n\r\n    this.renderer.clear();\r\n\r\n    // Move frame\r\n    if (isLinearAnimation(instance)) {\r\n      instance.advance(delta);\r\n      instance.apply(mix ?? 1);\r\n    } else {\r\n      instance.advance(delta);\r\n    }\r\n    this.artboard.advance(delta);\r\n\r\n    // Render frame on canvas\r\n    this.renderer.save();\r\n\r\n    // Align renderer if needed\r\n    const fit = this.rive.Fit[this.fit];\r\n    const alignment = this.rive.Alignment[this.alignment];\r\n    const box = this.box;\r\n    const bounds = this.artboard.bounds;\r\n    this.renderer.align(fit, alignment, box, bounds);\r\n\r\n    this.artboard.draw(this.renderer);\r\n\r\n    this.renderer.restore();\r\n\r\n    // TODO: If context is WebGL Flush\r\n    // this.renderer.flush();\r\n  }\r\n\r\n\r\n  private getTransform(event: MouseEvent | TouchEvent) {\r\n    if (!this.rive) return;\r\n    if (!this.artboard) return;\r\n    const boundingRect = this.canvas.getBoundingClientRect();\r\n\r\n    const { clientX, clientY } = getClientCoordinates(event);\r\n    if (!clientX && !clientY) return;\r\n    const canvasX = clientX - boundingRect.left;\r\n    const canvasY = clientY - boundingRect.top;\r\n    const forwardMatrix = this.rive.computeAlignment(\r\n      this.rive.Fit[this.fit],\r\n      this.rive.Alignment[this.alignment],\r\n      {\r\n        minX: 0,\r\n        minY: 0,\r\n        maxX: boundingRect.width,\r\n        maxY: boundingRect.height,\r\n      },\r\n      this.artboard.bounds\r\n    );\r\n    const invertedMatrix = new this.rive.Mat2D();\r\n    forwardMatrix.invert(invertedMatrix);\r\n    const canvasCoordinatesVector = new this.rive.Vec2D(canvasX, canvasY);\r\n    const transformedVector = this.rive.mapXY(\r\n      invertedMatrix,\r\n      canvasCoordinatesVector\r\n    );\r\n    const x = transformedVector.x();\r\n    const y = transformedVector.y();\r\n\r\n    transformedVector.delete();\r\n    invertedMatrix.delete();\r\n    canvasCoordinatesVector.delete();\r\n    forwardMatrix.delete();\r\n    return {x, y};\r\n  }\r\n}\r\n\r\nfunction isLinearAnimation(instance: StateMachineInstance | LinearAnimationInstance): instance is LinearAnimationInstance {\r\n  return 'didLoop' in instance;\r\n}","import { Directive, EventEmitter, Input, NgZone, OnDestroy, Output } from \"@angular/core\";\r\nimport { BehaviorSubject, merge, of, Subscription } from \"rxjs\";\r\nimport { distinctUntilChanged, filter, map, switchMap, tap } from \"rxjs/operators\";\r\nimport { RiveCanvas } from './canvas';\r\nimport { RiveService } from \"./service\";\r\nimport { LinearAnimationInstance, LinearAnimation } from \"@rive-app/canvas-advanced\";\r\n\r\ninterface RivePlayerState {\r\n  speed: number;\r\n  playing: boolean;\r\n  /** Weight of this animation over another */\r\n  mix: number;\r\n  /** Reset automatically to 0 when play is down if mode is \"one-shot\" */\r\n  autoreset: boolean;\r\n  /** override mode of the animation */\r\n  mode?: 'loop' | 'ping-pong' | 'one-shot';\r\n}\r\n\r\nfunction getRivePlayerState(state: Partial<RivePlayerState> = {}): RivePlayerState {\r\n  return {\r\n    speed: 1,\r\n    playing: false,\r\n    mix: 1,\r\n    autoreset: false,\r\n    ...state\r\n  }\r\n}\r\n\r\nexport function frameToSec(frame: number, fps: number) {\r\n  return frame / fps;\r\n}\r\n\r\nexport function round(value: number) {\r\n  return Math.round((value + Number.EPSILON) * 10000) / 10000;\r\n}\r\n\r\nfunction exist<T>(v: T | undefined | null): v is T {\r\n  return v !== undefined && v !== null;\r\n}\r\n\r\nfunction getStart(animation: LinearAnimationInstance) {\r\n  if (!animation.workStart || animation.workStart === -1) return 0;\r\n  return round(animation.workStart / animation.fps);\r\n}\r\n\r\nfunction getEnd(animation: LinearAnimationInstance) {\r\n  const end = (!animation.workEnd ||animation.workEnd === -1) ? animation.duration : animation.workEnd;\r\n  return round(end / animation.fps);\r\n}\r\n\r\n@Directive({\r\n    selector: 'riv-player, [rivPlayer]',\r\n    exportAs: 'rivPlayer',\r\n    standalone: true\r\n})\r\nexport class RivePlayer implements OnDestroy {\r\n  private sub?: Subscription;\r\n  private animation?: LinearAnimation;\r\n  private instance?: LinearAnimationInstance;\r\n\r\n  startTime?: number;\r\n  endTime?: number;\r\n  distance = new BehaviorSubject<number | null>(null);\r\n  state = new BehaviorSubject<RivePlayerState>(getRivePlayerState());\r\n\r\n  /**\r\n   * Name of the rive animation in the current Artboard\r\n   * Either use name or index to select an animation\r\n   */\r\n  @Input()\r\n  set name(name: string | undefined | null) {\r\n    if (typeof name !== 'string') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(name);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Index of the rive animation in the current Artboard \r\n   * Either use index of name to select an animation\r\n   */\r\n  @Input()\r\n  set index(value: number | string | undefined | null) {\r\n    const index = typeof value === 'string' ? parseInt(value) : value;\r\n    if (typeof index !== 'number') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(index);\r\n    });\r\n  }\r\n\r\n  /** The mix of this animation in the current arboard */\r\n  @Input()\r\n  set mix(value: number | string | undefined | null) {\r\n    const mix = typeof value === 'string' ? parseFloat(value) : value; \r\n    if (mix && mix >= 0 && mix <= 1) this.update({ mix });\r\n  }\r\n  get mix() {\r\n    return this.state.getValue().mix;\r\n  }\r\n\r\n  /** Multiplicator of the speed for the animation */\r\n  @Input()\r\n  set speed(value: number | string | undefined | null) {\r\n    const speed = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (typeof speed === 'number') this.update({ speed });\r\n  }\r\n  get speed() {\r\n    return this.state.getValue().speed;\r\n  }\r\n\r\n  @Input() set play(playing: boolean | '' | undefined | null) {\r\n    if (playing === true || playing === '') {\r\n      this.update({ playing: true });\r\n    } else if (playing === false) {\r\n      this.update({ playing: false });\r\n    }\r\n  }\r\n  get play() {\r\n    return this.state.getValue().playing;\r\n  }\r\n\r\n  \r\n  @Input()\r\n  set time(value: number | string | undefined | null) {\r\n    const time = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (typeof time === 'number') this.distance.next(time);\r\n  }\r\n\r\n  /**\r\n   * @deprecated This will be removed\r\n   * Consider using StateMachine instead\r\n   */\r\n  @Input()\r\n  set autoreset(autoreset: boolean | '' | undefined | null) {\r\n    if (autoreset === true || autoreset === '') {\r\n      this.update({ autoreset: true });\r\n    } else if (autoreset === false) {\r\n      this.update({ autoreset: false });\r\n    }\r\n  }\r\n  get autoreset() {\r\n    return this.state.getValue().autoreset;\r\n  }\r\n\r\n  /**\r\n   * @deprecated This will be removed\r\n   * Consider using StateMachine instead\r\n   */\r\n  @Input()\r\n  set mode(mode: RivePlayerState['mode']) {\r\n    if (mode) this.update({ mode });\r\n  }\r\n  get mode() {\r\n    return this.state.getValue().mode;\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-output-native\r\n  @Output() load = new EventEmitter<LinearAnimationInstance>();\r\n  @Output() timeChange = new EventEmitter<number>();\r\n  @Output() playChange = new EventEmitter<boolean>();\r\n  @Output() speedChange = new EventEmitter<number>();\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private canvas: RiveCanvas,\r\n    private service: RiveService,\r\n  ) {}\r\n\r\n  \r\n  ngOnDestroy() {\r\n    this.sub?.unsubscribe();\r\n    setTimeout(() => this.instance?.delete(), 100);\r\n  }\r\n\r\n  private update(state: Partial<RivePlayerState>) {\r\n    const next = getRivePlayerState({...this.state.getValue(), ...state })\r\n    this.state.next(next);\r\n  }\r\n\r\n  private initAnimation(name: string | number) {\r\n    if (!this.service.rive) throw new Error('Could not load animation instance before rive');\r\n    if (!this.canvas.artboard) throw new Error('Could not load animation instance before artboard');\r\n    \r\n    const ref = typeof name === 'string'\r\n    ? this.canvas.artboard.animationByName(name)\r\n    : this.canvas.artboard.animationByIndex(name);\r\n    \r\n    this.animation = ref;\r\n    this.instance = new this.service.rive.LinearAnimationInstance(ref, this.canvas.artboard);\r\n    this.startTime = getStart(this.instance);\r\n    this.endTime = getEnd(this.instance);\r\n    \r\n    this.load.emit(this.instance);\r\n  }\r\n\r\n  private getFrame(state: RivePlayerState) {\r\n    if (state.playing && this.service.frame) {\r\n      return this.service.frame.pipe(map((time) => [state, time] as const));\r\n    } else {\r\n      return of(null)\r\n    }\r\n  }\r\n\r\n  private register(name: string | number) {\r\n    this.sub?.unsubscribe();  // Stop subscribing to previous animation if any\r\n    this.instance?.delete();  // Remove old instance if any\r\n\r\n    // Update if time have changed from the input\r\n    const onTimeChange = this.distance.pipe(\r\n      filter(exist),\r\n      distinctUntilChanged(),\r\n      map(time => time - this.instance!.time),\r\n    );\r\n\r\n    // Update on frame change if playing\r\n    const onFrameChange = this.state.pipe(\r\n      switchMap((state) => this.getFrame(state)),\r\n      filter(exist),\r\n      map(([state, time]) => this.moveFrame(state, time)),\r\n      tap((delta) => {\r\n        this.zone.run(() => this.timeChange.emit(this.instance!.time + delta))\r\n      })\r\n    );\r\n\r\n    // Wait for canvas & animation to be loaded\r\n    this.sub = this.canvas.onReady().pipe(\r\n      map(() => this.initAnimation(name)),\r\n      switchMap(() => merge(onTimeChange, onFrameChange))\r\n    ).subscribe((delta) => this.applyChange(delta));\r\n  }\r\n\r\n  private moveFrame(state: RivePlayerState, time: number) {\r\n    if (!this.instance) throw new Error('Could not load animation instance before running it');\r\n    if (!this.animation) throw new Error('Could not load animation before running it');\r\n    const { speed, autoreset, mode } = state;\r\n    // Default mode, don't apply any logic\r\n    if (!mode) return time / 1000 * speed;\r\n\r\n    let delta = (time / 1000) * speed;\r\n    \r\n    // Round to avoid JS error on division\r\n    const start = this.startTime ?? 0;\r\n    const end = this.endTime ?? (this.instance.duration / this.instance.fps);\r\n    const currentTime = round(this.instance.time);\r\n\r\n    // When player hit floor\r\n    if (currentTime + delta < start) {\r\n      if (mode === 'loop' && speed < 0 && end) {\r\n        delta = end - currentTime; // end - currentTime\r\n      } else if (mode === 'ping-pong') {\r\n        delta = -delta;\r\n        this.update({ speed: -speed });\r\n        this.zone.run(() => this.speedChange.emit(-speed));\r\n      } else if (mode === 'one-shot') {\r\n        this.update({ playing: false });\r\n        this.zone.run(() => this.playChange.emit(false));\r\n        delta = start - currentTime;\r\n      }\r\n    }\r\n\r\n    // Put before \"hit last frame\" else currentTime + delta > end\r\n    if (mode === 'one-shot' && autoreset) {\r\n      if (speed > 0 && currentTime === end) {\r\n        delta = start - end;\r\n      }\r\n      if (speed < 0 && currentTime === start) {\r\n        delta = end - start;\r\n      }\r\n    }\r\n\r\n    // When player hit last frame\r\n    if (currentTime + delta > end) {\r\n      if (mode === 'loop' && speed > 0) {\r\n        delta = start - currentTime;\r\n      } else if (mode === 'ping-pong') {\r\n        delta = -delta;\r\n        this.update({ speed: -speed });\r\n        this.zone.run(() => this.speedChange.emit(-speed));\r\n      } else if (mode === 'one-shot') {\r\n        this.update({ playing: false });\r\n        this.zone.run(() => this.playChange.emit(false));\r\n        delta = end - currentTime;\r\n      }\r\n    }\r\n  \r\n    return delta;\r\n  }\r\n\r\n  private applyChange(delta: number) {\r\n    // We need to use requestAnimationFrame when delta is changed by the time\r\n    this.service.rive?.requestAnimationFrame(() => {\r\n      if (!this.instance) throw new Error('Could not load animation instance before running it');\r\n      this.canvas.draw(this.instance, delta, this.state.getValue().mix);\r\n    });\r\n  }\r\n\r\n}","import { Directive, EventEmitter, Input, NgZone, OnDestroy, Output } from \"@angular/core\";\r\nimport { BehaviorSubject, of, Subscription } from \"rxjs\";\r\nimport { filter, map, switchMap } from \"rxjs/operators\";\r\nimport { RiveCanvas } from './canvas';\r\nimport { RiveService } from \"./service\";\r\nimport type { Artboard, LinearAnimationInstance, LinearAnimation } from \"@rive-app/canvas-advanced\";\r\n\r\ninterface RiveAnimationState {\r\n  speed: number;\r\n  playing: boolean;\r\n  /** Weight of this animation over another */\r\n  mix: number;\r\n}\r\n\r\nfunction getRiveAnimationState(state: Partial<RiveAnimationState> = {}): RiveAnimationState {\r\n  return {\r\n    speed: 1,\r\n    playing: false,\r\n    mix: 1,\r\n    ...state\r\n  }\r\n}\r\n\r\nfunction exist<T>(v: T | undefined | null): v is T {\r\n  return v !== undefined && v !== null;\r\n}\r\n\r\nfunction assertAnimation(animation: LinearAnimation, artboard: Artboard, name: string | number) {\r\n  if (animation) return;\r\n  const artboardName = artboard.name ?? 'Default';\r\n  const count = artboard.animationCount();\r\n  if (typeof name === 'number') {\r\n    throw new Error(`Provided index \"${name}\" for the animation of artboard \"${artboardName}\" is not available. Animation count is: ${count}`)\r\n  } else {\r\n    const names: string[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      names.push(artboard.animationByIndex(i).name);\r\n    }\r\n    throw new Error(`Provided name \"${name}\" for the animation of artboard \"${artboardName}\" is not available. Availables names are: ${JSON.stringify(names)}`);\r\n  }\r\n  \r\n}\r\n\r\n@Directive({\r\n    selector: 'riv-animation, [rivAnimation]',\r\n    exportAs: 'rivAnimation',\r\n    standalone: true\r\n})\r\nexport class RiveLinearAnimation implements OnDestroy {\r\n  private sub?: Subscription;\r\n  private instance?: LinearAnimationInstance;\r\n  distance = new BehaviorSubject<number | null>(null);\r\n  state = new BehaviorSubject<RiveAnimationState>(getRiveAnimationState());\r\n\r\n  /**\r\n   * Name of the rive animation in the current Artboard\r\n   * Either use name or index to select an animation\r\n   */\r\n  @Input()\r\n  set name(name: string | undefined | null) {\r\n    if (typeof name !== 'string') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(name);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Index of the rive animation in the current Artboard \r\n   * Either use index of name to select an animation\r\n   */\r\n  @Input()\r\n  set index(value: number | string | undefined | null) {\r\n    const index = typeof value === 'string' ? parseInt(value) : value;\r\n    if (typeof index !== 'number') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(index);\r\n    });\r\n  }\r\n\r\n  /** The mix of this animation in the current arboard */\r\n  @Input()\r\n  set mix(value: number | string | undefined | null) {\r\n    const mix = typeof value === 'string' ? parseFloat(value) : value; \r\n    if (mix && mix >= 0 && mix <= 1) this.update({ mix });\r\n  }\r\n  get mix() {\r\n    return this.state.getValue().mix;\r\n  }\r\n\r\n  /** Multiplicator for the speed of the animation */\r\n  @Input()\r\n  set speed(value: number | string | undefined | null) {\r\n    const speed = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (typeof speed === 'number') this.update({ speed });\r\n  }\r\n  get speed() {\r\n    return this.state.getValue().speed;\r\n  }\r\n\r\n  /** If true, this animation is playing */\r\n  @Input() set play(playing: boolean | '' | undefined | null) {\r\n    if (playing === true || playing === '') {\r\n      this.update({ playing: true });\r\n    } else if (playing === false) {\r\n      this.update({ playing: false });\r\n    }\r\n  }\r\n  get play() {\r\n    return this.state.getValue().playing;\r\n  }\r\n  \r\n  /** Emit when the LinearAnimation has been instantiated */\r\n  @Output() load = new EventEmitter<LinearAnimationInstance>();\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private canvas: RiveCanvas,\r\n    private service: RiveService,\r\n  ) {}\r\n  \r\n  ngOnDestroy() {\r\n    this.sub?.unsubscribe();\r\n    this.instance?.delete();\r\n    setTimeout(() => this.instance?.delete(), 100);\r\n  }\r\n\r\n  private update(state: Partial<RiveAnimationState>) {\r\n    const next = getRiveAnimationState({...this.state.getValue(), ...state })\r\n    this.state.next(next);\r\n  }\r\n\r\n  private getFrame(state: RiveAnimationState) {\r\n    if (state.playing && this.service.frame) {\r\n      return this.service.frame.pipe(map((time) => [state, time] as const));\r\n    } else {\r\n      return of(null)\r\n    }\r\n  }\r\n\r\n  private initAnimation(name: string | number) {\r\n    if (!this.canvas.rive) throw new Error('Could not load animation instance before rive');\r\n    if (!this.canvas.artboard) throw new Error('Could not load animation instance before artboard');\r\n    const ref = typeof name === 'string'\r\n      ? this.canvas.artboard.animationByName(name)\r\n      : this.canvas.artboard.animationByIndex(name);\r\n\r\n    assertAnimation(ref, this.canvas.artboard, name);\r\n\r\n    this.instance = new this.canvas.rive.LinearAnimationInstance(ref, this.canvas.artboard);\r\n    this.load.emit(this.instance);\r\n  }\r\n\r\n  private register(name: string | number) {\r\n    // Stop subscribing to previous animation if any\r\n    this.sub?.unsubscribe(); \r\n\r\n    // Update on frame change if playing\r\n    const onFrameChange = this.state.pipe(\r\n      switchMap((state) => this.getFrame(state)),\r\n      filter(exist),\r\n      map(([state, time]) => (time / 1000) * state.speed),\r\n    );\r\n\r\n    // Wait for canvas & animation to be loaded\r\n    this.sub = this.canvas.onReady().pipe(\r\n      map(() => this.initAnimation(name)),\r\n      switchMap(() => onFrameChange)\r\n    ).subscribe((delta) => this.applyChange(delta));\r\n  }\r\n\r\n  private applyChange(delta: number) {\r\n    if (!this.instance) throw new Error('Could not load animation instance before running it');\r\n    this.canvas.draw(this.instance, delta, this.state.getValue().mix);\r\n  }\r\n\r\n}","import { Directive, Input, NgZone } from '@angular/core';\r\nimport { RiveCanvas } from '../canvas';\r\nimport { TransformComponent } from '@rive-app/canvas-advanced';\r\n\r\n@Directive()\r\nexport abstract class RiveTransformComponent<T extends TransformComponent> {\r\n  protected component?: T;\r\n  protected state: Partial<T> = {};\r\n\r\n  @Input() set name(name: string) {\r\n    if (typeof name !== 'string') return;\r\n    this.canvas.onReady().subscribe(() => {\r\n      this.component = this.getComponent(name);\r\n      if (!this.component) throw new Error(`Could not find component with name: \"${name}\"`);\r\n      for (const key in this.state) {\r\n        this.component[key as keyof T] = this.state[key as keyof T] as any;\r\n      }\r\n    });\r\n  }\r\n\r\n  @Input() set scale(value: string | null | undefined) {\r\n    this.set('scaleX', value);\r\n    this.set('scaleY', value);\r\n  }\r\n\r\n  @Input() set scaleX(value: number | string | null | undefined) {\r\n    this.set('scaleX', value);\r\n  }\r\n\r\n  @Input() set scaleY(value: number | string | null | undefined) {\r\n    this.set('scaleX', value);\r\n  }\r\n\r\n  @Input() set rotation(value: number | string | null | undefined) {\r\n    const v = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (v) {\r\n      const rotation = Math.abs(v) > (2 * Math.PI) ? (v * (Math.PI/180)) : v;\r\n      this.set('rotation', rotation);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    protected canvas: RiveCanvas\r\n  ) {}\r\n\r\n  abstract getComponent(name: string): T | undefined;\r\n\r\n  protected set(key: keyof T, value: number | string | null | undefined) {\r\n    this.zone.runOutsideAngular(() => {\r\n      const v = typeof value === 'string' ? parseFloat(value) : value;\r\n      if (typeof v === 'number') {\r\n        if (this.component) this.component[key] = v as any;\r\n        else this.state[key] = v as any;\r\n      }\r\n    });\r\n  }\r\n}","import { Directive, Input, NgZone } from '@angular/core';\r\nimport { RiveCanvas } from '../canvas';\r\nimport { RiveTransformComponent } from './transform-component';\r\nimport { Node } from '@rive-app/canvas-advanced';\r\n\r\n@Directive({\r\n    selector: 'riv-node, [rivNode]',\r\n    exportAs: 'rivNode',\r\n    standalone: true\r\n})\r\nexport class RiveNode extends RiveTransformComponent<Node> {\r\n  @Input()\r\n  set x(value: number | string | null | undefined) {\r\n    this.set('x', value);\r\n  }\r\n  get x() {\r\n    return this.component?.x;\r\n  }\r\n\r\n  @Input()\r\n  set y(value: number | string | null | undefined) {\r\n    this.set('y', value);\r\n  }\r\n  get y() {\r\n    return this.component?.y;\r\n  }\r\n\r\n  constructor(zone: NgZone, canvas: RiveCanvas) {\r\n    super(zone, canvas);\r\n  }\r\n\r\n  getComponent(name: string) {\r\n    return this.canvas.artboard?.node(name);\r\n  }\r\n\r\n}","import { Directive, Input, NgZone } from '@angular/core';\r\nimport { RiveCanvas } from '../canvas';\r\nimport { RiveTransformComponent } from './transform-component';\r\nimport { Bone } from '@rive-app/canvas-advanced';\r\n\r\n\r\n@Directive({\r\n    selector: 'riv-bone, [rivBone]',\r\n    exportAs: 'rivBone',\r\n    standalone: true\r\n})\r\nexport class RiveBone extends RiveTransformComponent<Bone> {\r\n  @Input() set length(value: number | string | null | undefined) {\r\n    this.set('length', value);\r\n  }\r\n\r\n  constructor(zone: NgZone, canvas: RiveCanvas) {\r\n    super(zone, canvas);\r\n  }\r\n\r\n  getComponent(name: string) {\r\n    return this.canvas.artboard?.bone(name);\r\n  }\r\n\r\n}","import { Directive, Input, NgZone } from '@angular/core';\r\nimport { RiveCanvas } from '../canvas';\r\nimport { RiveTransformComponent } from './transform-component';\r\nimport { RootBone } from '@rive-app/canvas-advanced';\r\n\r\n\r\n@Directive({\r\n    selector: 'riv-root-bone, [rivRootBone]',\r\n    exportAs: 'rivRootBone',\r\n    standalone: true\r\n})\r\nexport class RiveRootBone extends RiveTransformComponent<RootBone> {\r\n  @Input() set x(value: number | string | null | undefined) {\r\n    this.set('x', value);\r\n  }\r\n\r\n  @Input() set y(value: number | string | null | undefined) {\r\n    this.set('y', value);\r\n  }\r\n\r\n  @Input() set length(value: number | string | null | undefined) {\r\n    this.set('length', value);\r\n  }\r\n\r\n  constructor(zone: NgZone, canvas: RiveCanvas) {\r\n    super(zone, canvas);\r\n  }\r\n\r\n  getComponent(name: string) {\r\n    return this.canvas.artboard?.rootBone(name);\r\n  }\r\n\r\n}","import {\r\n  EventEmitter,\r\n  Directive,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  Inject, forwardRef\r\n} from '@angular/core';\r\nimport { Artboard, SMIInput, StateMachine, StateMachineInstance } from '@rive-app/canvas-advanced';\r\nimport { BehaviorSubject, of, Subscription } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { RiveCanvas } from './canvas';\r\nimport { RiveService } from './service';\r\n\r\n///////////\r\n// INPUT //\r\n///////////\r\nconst enum InputTypes {\r\n  Number = 56,\r\n  Trigger = 58,\r\n  Boolean = 59,\r\n}\r\n\r\nfunction getInput(input: SMIInput) {\r\n  if (input.type === InputTypes.Number) return input.asNumber();\r\n  if (input.type === InputTypes.Boolean) return input.asBool();\r\n  if (input.type === InputTypes.Trigger) return input.asTrigger();\r\n  return input;\r\n}\r\n\r\nfunction assertStateMachine(animation: StateMachine, artboard: Artboard, name: string | number) {\r\n  if (animation) return;\r\n  const artboardName = artboard.name ?? 'Default';\r\n  const count = artboard.stateMachineCount();\r\n  if (typeof name === 'number') {\r\n    throw new Error(`Provided index \"${name}\" for the animation of artboard \"${artboardName}\" is not available. Animation count is: ${count}`)\r\n  } else {\r\n    const names: string[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      names.push(artboard.stateMachineByIndex(i).name);\r\n    }\r\n    throw new Error(`Provided name \"${name}\" for the animation of artboard \"${artboardName}\" is not available. Availables names are: ${JSON.stringify(names)}`);\r\n  }\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'riv-input, [rivInput]',\r\n  exportAs: 'rivInput',\r\n  standalone: true\r\n})\r\nexport class RiveSMInput {\r\n  private _name?: string;\r\n  private _value?: boolean | number;\r\n  private input?: SMIInput;\r\n  private shouldFire?: (input: SMIInput) => void;\r\n\r\n  @Input()\r\n  set name(name: string | undefined) {\r\n    if (!name) return;\r\n    this._name = name;\r\n    if (this.input) return;\r\n    this.init(this.stateMachine.inputs[name]);\r\n  }\r\n  get name() {\r\n    return this.input?.name ?? this._name;\r\n  }\r\n\r\n  @Input()\r\n  set value(rawValue: string | boolean | number | undefined | null) {\r\n    if (typeof rawValue === 'undefined' || rawValue === null) return;\r\n    const value = typeof rawValue === 'string'\r\n      ? parseFloat(rawValue)\r\n      : rawValue;\r\n    if (this.input) {\r\n      this.input.value = value;\r\n      this.change.emit(this.input);\r\n    } else {\r\n      this._value = value;\r\n    }\r\n  }\r\n  get value() {\r\n    return this.input?.value ?? this._value;\r\n  }\r\n\r\n  @Output() change = new EventEmitter<SMIInput>();\r\n  @Output() load = new EventEmitter<SMIInput>();\r\n\r\n  constructor(@Inject(forwardRef(() => RiveStateMachine)) private stateMachine: RiveStateMachine) {}\r\n\r\n  /** @internal: Used by the RiveStateMachine */\r\n  public init(input?: SMIInput) {\r\n    if (!input || input.name === this.input?.name) return;\r\n    this.input = getInput(input);\r\n    this.load.emit(input);\r\n    if (typeof this._value !== 'undefined') {\r\n      this.input.value = this._value;\r\n      this.change.emit(this.input);\r\n    }\r\n    if (this.shouldFire) {\r\n      this.shouldFire(input);\r\n      delete this.shouldFire;\r\n    }\r\n  }\r\n\r\n  fire() {\r\n    const fire = (input: SMIInput) => {\r\n      if (input.type === InputTypes.Trigger) {\r\n        input.fire();\r\n        this.change.emit(input);\r\n      }\r\n    }\r\n    this.input\r\n      ? fire(this.input)\r\n      : this.shouldFire = fire;\r\n  }\r\n}\r\n\r\n\r\n///////////////////\r\n// STATE MACHINE //\r\n///////////////////\r\n\r\ninterface StateMachineState {\r\n  speed: number;\r\n  playing: boolean;\r\n}\r\n\r\nfunction exist<T>(v: T | undefined | null): v is T {\r\n  return v !== undefined && v !== null;\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: 'riv-state-machine, [rivStateMachine]',\r\n    exportAs: 'rivStateMachine',\r\n    standalone: true\r\n})\r\nexport class RiveStateMachine implements OnDestroy {\r\n  private sub?: Subscription;\r\n  /** @internal: public only for RiveInput */\r\n  public instance?: StateMachineInstance;\r\n  public state = new BehaviorSubject<StateMachineState>({ speed: 1, playing: false });\r\n\r\n  public inputs: Record<string, SMIInput> = {};\r\n  @ContentChildren(RiveSMInput) private riveInputs?: QueryList<RiveSMInput>;\r\n\r\n  @Output() load = new EventEmitter<StateMachineInstance>();\r\n  @Output() stateChange = new EventEmitter<string[]>();\r\n\r\n  @Input()\r\n  set name(name: string | undefined | null) {\r\n    if (typeof name !== 'string') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(name);\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  set index(value: number | string | undefined | null) {\r\n    const index = typeof value === 'string' ? parseInt(value) : value;\r\n    if (typeof index !== 'number') return;\r\n    this.zone.runOutsideAngular(() => {\r\n      this.register(index);\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  set speed(value: number | string | undefined | null) {\r\n    const speed = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (typeof speed === 'number') this.update({ speed });\r\n  }\r\n  get speed() {\r\n    return this.state.getValue().speed;\r\n  }\r\n\r\n  @Input() set play(playing: boolean | '' | undefined | null) {\r\n    if (playing === true || playing === '') {\r\n      this.update({ playing: true });\r\n    } else if (playing === false) {\r\n      this.update({ playing: false });\r\n    }\r\n  }\r\n  get play() {\r\n    return this.state.getValue().playing;\r\n  }\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private canvas: RiveCanvas,\r\n    private service: RiveService,\r\n  ) {}\r\n\r\n  ngOnDestroy() {\r\n    const name = this.instance?.name;\r\n    if (name) delete this.canvas.stateMachines[name];\r\n    this.sub?.unsubscribe();\r\n    setTimeout(() => this.instance?.delete(), 100);\r\n  }\r\n\r\n  private update(state: Partial<StateMachineState>) {\r\n    this.state.next({...this.state.getValue(), ...state });\r\n  }\r\n\r\n  private setInput(input: SMIInput) {\r\n    this.inputs[input.name] = input;\r\n    const riveInput = this.riveInputs?.find(item => item.name === input.name);\r\n    if (riveInput) {\r\n      riveInput.init(input);\r\n    }\r\n  }\r\n\r\n  private getFrame(state: StateMachineState) {\r\n    if (state.playing && this.service.frame) {\r\n      return this.service.frame.pipe(map((time) => [state, time] as const));\r\n    } else {\r\n      return of(null)\r\n    }\r\n  }\r\n\r\n\r\n  private initStateMachine(name: string | number) {\r\n    if (!this.canvas.rive) throw new Error('Could not load state machine instance before rive');\r\n    if (!this.canvas.artboard) throw new Error('Could not load state machine instance before artboard');\r\n    const ref = typeof name === 'string'\r\n      ? this.canvas.artboard.stateMachineByName(name)\r\n      : this.canvas.artboard.stateMachineByIndex(name);\r\n\r\n    assertStateMachine(ref, this.canvas.artboard, name);\r\n\r\n    // Fetch the inputs from the runtime if we don't have them\r\n    this.instance = new this.canvas.rive.StateMachineInstance(ref, this.canvas.artboard);\r\n    this.canvas.stateMachines[this.instance.name] = this.instance;\r\n    for (let i = 0; i < this.instance.inputCount(); i++) {\r\n      this.setInput(this.instance.input(i));\r\n    }\r\n    this.load.emit(this.instance);\r\n  }\r\n\r\n  private register(name: string | number) {\r\n    // Stop subscribing to previous animation if any\r\n    this.sub?.unsubscribe();\r\n\r\n    // Update on frame change if playing\r\n    const onFrameChange = this.state.pipe(\r\n      switchMap((state) => this.getFrame(state)),\r\n      filter(exist),\r\n      map(([state, time]) => (time / 1000) * state.speed)\r\n    );\r\n\r\n    // Wait for canvas & animation to be loaded\r\n    this.sub = this.canvas.onReady().pipe(\r\n      map(() => this.initStateMachine(name)),\r\n      switchMap(() => onFrameChange)\r\n    ).subscribe((delta) => this.applyChange(delta));\r\n  }\r\n\r\n  private applyChange(delta: number) {\r\n    if (!this.instance) throw new Error('Could not load state machin instance before running it');\r\n    this.canvas.draw(this.instance, delta);\r\n    // Check for any state machines that had a state change\r\n    const changeCount = this.instance.stateChangedCount();\r\n    if (changeCount) {\r\n      const states = [];\r\n      for (let i = 0; i < changeCount; i++) {\r\n        states.push(this.instance.stateChangedNameByIndex(i));\r\n      }\r\n      this.stateChange.emit(states);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RiveCanvas } from './canvas';\r\nimport { RivePlayer } from './player';\r\nimport { RiveLinearAnimation } from './animation';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RiveNode } from './component/node';\r\nimport { RiveBone } from './component/bone';\r\nimport { RiveRootBone } from './component/root-bone';\r\nimport { RiveSMInput, RiveStateMachine } from './state-machine';\r\n\r\n@NgModule({\r\n    imports: [HttpClientModule, RiveCanvas, RiveLinearAnimation, RivePlayer, RiveNode, RiveBone, RiveRootBone, RiveSMInput, RiveStateMachine],\r\n    exports: [RiveCanvas, RiveLinearAnimation, RivePlayer, RiveNode, RiveBone, RiveRootBone, RiveSMInput, RiveStateMachine],\r\n})\r\nexport class RiveModule {}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["exist","i1.RiveService","i1.RiveCanvas","i2.RiveService"],"mappings":"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"}