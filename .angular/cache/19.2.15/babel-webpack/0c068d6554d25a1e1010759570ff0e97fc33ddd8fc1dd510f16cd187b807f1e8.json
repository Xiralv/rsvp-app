{"ast":null,"code":"import _asyncToGenerator from \"/Users/vlarix/Documents/mobile-apps/rsvp-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/supabase/supabase-api.service\";\nimport * as i3 from \"src/app/services/global-services/global-services\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/router\";\nexport let LoginPage = /*#__PURE__*/(() => {\n  var _LoginPage;\n  class LoginPage {\n    constructor(fb, api, globalServices) {\n      this.fb = fb;\n      this.api = api;\n      this.globalServices = globalServices;\n      this.loginForm = this.fb.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n      });\n    }\n    onSubmit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.loginForm.valid) {\n          const {\n            email,\n            password\n          } = _this.loginForm.value;\n          // Handle login logic here (e.g. call API)\n          console.log('Logging in with', email, password);\n          const {\n            data,\n            error\n          } = yield _this.api.login({\n            email,\n            password\n          });\n          if (error) {\n            var _error$message;\n            let color = (error === null || error === void 0 ? void 0 : error.code) == 'invalid_credentials' ? 'danger' : 'warning';\n            yield _this.globalServices.presentToast((_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : 'Error on server', color, 'alert-circle-outline');\n          }\n        }\n      })();\n    }\n  }\n  _LoginPage = LoginPage;\n  _LoginPage.ɵfac = function LoginPage_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _LoginPage)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SupaBaseApiService), i0.ɵɵdirectiveInject(i3.GlobalServices));\n  };\n  _LoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _LoginPage,\n    selectors: [[\"app-login\"]],\n    standalone: false,\n    decls: 23,\n    vars: 2,\n    consts: [[1, \"ion-padding\", \"login-background\"], [1, \"login-container\"], [1, \"login-card\"], [1, \"ion-text-center\"], [3, \"ngSubmit\", \"formGroup\"], [\"position\", \"floating\"], [\"type\", \"email\", \"formControlName\", \"email\", \"required\", \"\"], [\"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"expand\", \"block\", \"type\", \"submit\", 1, \"ion-margin-top\", 3, \"disabled\"], [1, \"ion-text-center\", \"ion-margin-top\"], [\"routerLink\", \"/signup\"]],\n    template: function LoginPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0)(1, \"div\", 1)(2, \"ion-card\", 2)(3, \"ion-card-header\")(4, \"ion-card-title\", 3);\n        i0.ɵɵtext(5, \"Login\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"ion-card-content\")(7, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginPage_Template_form_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(8, \"ion-item\")(9, \"ion-label\", 5);\n        i0.ɵɵtext(10, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"ion-input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"ion-item\")(13, \"ion-label\", 5);\n        i0.ɵɵtext(14, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"ion-input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"ion-button\", 8);\n        i0.ɵɵtext(17, \" Sign In \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 9)(19, \"small\");\n        i0.ɵɵtext(20, \" Don\\u2019t have an account? \");\n        i0.ɵɵelementStart(21, \"a\", 10);\n        i0.ɵɵtext(22, \"Sign up\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i4.IonButton, i4.IonCard, i4.IonCardContent, i4.IonCardHeader, i4.IonCardTitle, i4.IonContent, i4.IonInput, i4.IonItem, i4.IonLabel, i4.TextValueAccessor, i4.RouterLinkWithHrefDelegate, i5.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".login-background[_ngcontent-%COMP%]{--background: #f2f2f2}.login-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:80%}.login-card[_ngcontent-%COMP%]{width:100%;max-width:400px;padding:1rem}.text-color[_ngcontent-%COMP%]{color:#fff}\"]\n  });\n  return LoginPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}